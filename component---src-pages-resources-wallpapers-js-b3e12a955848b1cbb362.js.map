{"version":3,"sources":["webpack:///./src/pages/resources/wallpapers.js"],"names":["query","Wallpapers","location","data","className","title","allFile","nodes","map","name","childImageSharp","original","mini","w1920x1080","w1920x1200","padding","href","src","target","rel","alt","width","height"],"mappings":"yNAuDaA,EAAK,aAyDHC,UAzGI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACjB,kBAAC,IAAD,CAAQD,SAAUA,GAChB,yBAAKE,UAAU,cACb,kBAAC,IAAD,CAAQC,MAAM,eACd,4BAAQD,UAAU,iCAChB,yBAAKA,UAAU,aACb,wBAAIA,UAAU,2BAAd,OACM,iDAIV,6BAASA,UAAU,aACjB,kBAAC,IAAD,CAAMA,UAAU,oBACbD,EAAKG,QAAQC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,IAASC,gBAAmBC,EAA5B,EAA4BA,SAAUC,EAAtC,EAAsCA,KAAMC,EAA5C,EAA4CA,WAAYC,EAAxD,EAAwDA,WAAxD,OACtB,kBAAC,IAAD,CAAUC,QAAS,IACjB,uBACEX,UAAU,sCACVY,KAAML,EAASM,IACfC,OAAO,SACPC,IAAI,uBAEJ,yBAAKF,IAAKL,EAAKK,IAAKG,IAAKX,IACzB,yBAAKL,UAAU,0BACb,uBACEY,KAAML,EAASM,IACfC,OAAO,SACPC,IAAI,uBACDR,EAASU,MAJd,IAIuBV,EAASW,QAChC,uBACEN,KAAMH,EAAWI,IACjBC,OAAO,SACPC,IAAI,uBACDN,EAAWQ,MAJhB,IAIyBR,EAAWS,QACpC,uBACEN,KAAMF,EAAWG,IACjBC,OAAO,SACPC,IAAI,uBACDL,EAAWO,MAJhB,IAIyBP,EAAWQ","file":"component---src-pages-resources-wallpapers-js-b3e12a955848b1cbb362.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport Layout from '../../components/Layout';\nimport { Grid, GridItem } from '../../components/common/Grid';\n\nconst Wallpapers = ({ location, data }) => (\n  <Layout location={location}>\n    <div className=\"wallpapers\">\n      <Helmet title=\"Wallpapers\" />\n      <header className=\"page__header-overlaid bg-blue\">\n        <div className=\"container\">\n          <h1 className=\"page__title color-white\">\n            Our <strong>wallpapers</strong>\n          </h1>\n        </div>\n      </header>\n      <section className=\"container\">\n        <Grid className=\"wallpapers__grid\">\n          {data.allFile.nodes.map(({ name, childImageSharp: { original, mini, w1920x1080, w1920x1200 } }) => (\n            <GridItem padding={10}>\n              <a\n                className=\"wallpaper__card card p-10 clickable\"\n                href={original.src}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <img src={mini.src} alt={name} />\n                <div className=\"wallpaper__resolutions\">\n                  <a\n                    href={original.src}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >{`${original.width}x${original.height}`}</a>\n                  <a\n                    href={w1920x1080.src}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >{`${w1920x1080.width}x${w1920x1080.height}`}</a>\n                  <a\n                    href={w1920x1200.src}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >{`${w1920x1200.width}x${w1920x1200.height}`}</a>\n                </div>\n              </a>\n            </GridItem>\n          ))}\n        </Grid>\n      </section>\n    </div>\n  </Layout>\n);\n\nexport const query = graphql`\n  query {\n    allFile(filter: { sourceInstanceName: { eq: \"wallpapers\" } }) {\n      nodes {\n        name\n        childImageSharp {\n          original {\n            src\n            height\n            width\n          }\n          w1920x1200: resize(width: 1920, height: 1200, quality: 100) {\n            src\n            width\n            height\n          }\n          w1920x1080: resize(width: 1920, height: 1080, quality: 100) {\n            src\n            width\n            height\n          }\n          mini: resize(width: 500, quality: 100) {\n            src\n            width\n            height\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst imageType = PropTypes.shape({\n  src: PropTypes.string,\n  width: PropTypes.number,\n  height: PropTypes.number,\n});\n\nWallpapers.propTypes = {\n  data: PropTypes.shape({\n    allFile: PropTypes.shape({\n      nodes: PropTypes.arrayOf(\n        PropTypes.shape({\n          name: PropTypes.string,\n          childImageSharp: PropTypes.shape({\n            original: imageType,\n            mini: imageType,\n            w1920x1200: imageType,\n            w1920x1080: imageType,\n          }),\n        })\n      ),\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default Wallpapers;\n"],"sourceRoot":""}