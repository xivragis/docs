{"componentChunkName":"component---src-templates-doc-js","path":"/docs/v2.4/distribution/testing/","result":{"pageContext":{"html":"<h1 id=\"testing-and-specifying-the-api\" style=\"position:relative;\"><a href=\"#testing-and-specifying-the-api\" aria-label=\"testing and specifying the api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing and Specifying the API</h1>\n<p>Now that you have a functional API, it might be interesting to write some tests to ensure your API have no potential\nbugs. A set of useful tools to specify and test your API are easily installable in the API Platform distribution. We\nrecommend you and we will focus on two tools:</p>\n<ul>\n<li><a href=\"https://github.com/nelmio/alice\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alice</a>, an expressive fixtures generator to write data fixtures, and its Symfony\nintegration, <a href=\"https://github.com/hautelook/AliceBundle#database-testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AliceBundle</a>;</li>\n<li><a href=\"https://phpunit.de/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a>, a testing framework to cover your classes with unit tests and to write\nfunctional tests thanks to its Symfony integration, <a href=\"https://symfony.com/doc/current/components/phpunit_bridge.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit Bridge</a>.</li>\n</ul>\n<p>Official Symfony recipes are provided for both tools.</p>\n<h2 id=\"creating-data-fixtures\" style=\"position:relative;\"><a href=\"#creating-data-fixtures\" aria-label=\"creating data fixtures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Data Fixtures</h2>\n<p>Before creating your functional tests, you will need a dataset to pre-populate your API and be able to test it.</p>\n<p>First, install <a href=\"https://github.com/nelmio/alice\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alice</a> and <a href=\"https://github.com/hautelook/AliceBundle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AliceBundle</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php composer require --dev alice</code></pre></div>\n<p>Thanks to Symfony Flex, <a href=\"https://github.com/hautelook/AliceBundle/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AliceBundle</a> is ready to use\nand you can place your data fixtures files in a directory named <code class=\"language-text\">fixtures/</code>.</p>\n<p>Then, create some fixtures for <a href=\"/docs/v2.4/distribution/index/\">the bookstore API you created in the tutorial</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/fixtures/book.yaml</span>\n\n<span class=\"token key atrule\">App\\Entity\\Book</span><span class=\"token punctuation\">:</span>\n    book_<span class=\"token punctuation\">{</span>1..10<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">isbn</span><span class=\"token punctuation\">:</span> &lt;isbn13()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> &lt;sentence(4)<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> &lt;text()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> &lt;name()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">publicationDate</span><span class=\"token punctuation\">:</span> &lt;dateTime()<span class=\"token punctuation\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/fixtures/review.yaml</span>\n\n<span class=\"token key atrule\">App\\Entity\\Review</span><span class=\"token punctuation\">:</span>\n    review_<span class=\"token punctuation\">{</span>1..20<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">rating</span><span class=\"token punctuation\">:</span> &lt;numberBetween(0<span class=\"token punctuation\">,</span> 5)<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">body</span><span class=\"token punctuation\">:</span> &lt;text()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> &lt;name()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">publicationDate</span><span class=\"token punctuation\">:</span> &lt;dateTime()<span class=\"token punctuation\">></span>\n        <span class=\"token key atrule\">book</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'@book_*'</span></code></pre></div>\n<p>You can now load your fixtures in the database with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php bin/console hautelook:fixtures:load</code></pre></div>\n<p>To learn more about fixtures, take a look at the documentation of <a href=\"https://github.com/nelmio/alice/blob/master/README.md#table-of-contents\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alice</a>\nand <a href=\"https://github.com/hautelook/AliceBundle/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AliceBundle</a>.</p>\n<h2 id=\"writing-functional-tests\" style=\"position:relative;\"><a href=\"#writing-functional-tests\" aria-label=\"writing functional tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Functional Tests</h2>\n<p>Now that you have some data fixtures for your API, you are ready to write functional tests with <a href=\"https://phpunit.de/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a>.</p>\n<p>Install the Symfony test pack which includes <a href=\"https://symfony.com/doc/current/components/phpunit_bridge.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit Bridge</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php composer require --dev test-pack</code></pre></div>\n<p>Your API is ready to be functionally tested. Create your test classes under the <code class=\"language-text\">tests/</code> directory.</p>\n<p>Here is an example of functional tests specifying the behavior of <a href=\"/docs/v2.4/distribution/index/\">the bookstore API you created in the tutorial</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/tests/ApiTest.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Tests</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity<span class=\"token punctuation\">\\</span>Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Hautelook<span class=\"token punctuation\">\\</span>AliceBundle<span class=\"token punctuation\">\\</span>PhpUnit<span class=\"token punctuation\">\\</span>RefreshDatabaseTrait</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Bundle<span class=\"token punctuation\">\\</span>FrameworkBundle<span class=\"token punctuation\">\\</span>Client</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Bundle<span class=\"token punctuation\">\\</span>FrameworkBundle<span class=\"token punctuation\">\\</span>Test<span class=\"token punctuation\">\\</span>WebTestCase</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpFoundation<span class=\"token punctuation\">\\</span>Response</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebTestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">RefreshDatabaseTrait</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/** @var Client */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$client</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Retrieves the book list.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testRetrieveTheBookList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/books'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$json</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'application/ld+json; charset=utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">headers</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'hydra:totalItems'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'hydra:totalItems'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'hydra:member'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'hydra:member'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Throws errors when data are invalid.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testThrowErrorsWhenDataAreInvalid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'isbn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'1312'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'author'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'Kévin Dunglas'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'description'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM.'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'publicationDate'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'2013-12-01'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/books'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$json</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'application/ld+json; charset=utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">headers</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'propertyPath'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'isbn'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'propertyPath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'propertyPath'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'violations'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'propertyPath'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Creates a book.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testCreateABook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'isbn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'9781782164104'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'Persistence in PHP with Doctrine ORM'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'description'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'This book is designed for PHP developers and architects who want to modernize their skills through better understanding of Persistence and ORM. You\\'ll learn through explanations and code samples, all tied to the full development of a web application.'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'author'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'Kévin Dunglas'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'publicationDate'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'2013-12-01'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/books'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$json</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'application/ld+json; charset=utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">headers</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'isbn'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'9781782164104'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'isbn'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Updates a book.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testUpdateABook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'isbn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'9781234567897'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'PUT'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">findOneIriBy</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'isbn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'9790456981541'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$json</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'application/ld+json; charset=utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">headers</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertArrayHasKey</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'isbn'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'9781234567897'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$json</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'isbn'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Deletes a book.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testDeleteABook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'DELETE'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">findOneIriBy</span><span class=\"token punctuation\">(</span>Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'isbn'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'9790456981541'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEmpty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Retrieves the documentation.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testRetrieveTheDocumentation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Accept'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'text/html'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'text/html; charset=UTF-8'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">headers</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">assertContains</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello API Platform'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">client</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">createClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @param string|array|null $content\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$method</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$headers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Response\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$server</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'CONTENT_TYPE'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'application/ld+json'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'HTTP_ACCEPT'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'application/ld+json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$headers</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token single-quoted-string string\">'content-type'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token variable\">$server</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'CONTENT_TYPE'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token variable\">$server</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'HTTP_'</span><span class=\"token punctuation\">.</span><span class=\"token function\">strtoupper</span><span class=\"token punctuation\">(</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean constant\">false</span> <span class=\"token operator\">!==</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'#^application/(?:.+\\+)?json$#'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$server</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'CONTENT_TYPE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$content</span> <span class=\"token operator\">=</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">client</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$method</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$server</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">client</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">findOneIriBy</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$criteria</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$resource</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token variable\">$container</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'doctrine'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">findOneBy</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$criteria</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token variable\">$container</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'api_platform.iri_converter'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getIriFromitem</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$resource</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>As you can see, the example uses the <a href=\"https://github.com/hautelook/AliceBundle#database-testing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">trait <code class=\"language-text\">RefreshDatabaseTrait</code></a>\nfrom <a href=\"https://github.com/hautelook/AliceBundle/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AliceBundle</a> which will, at the beginning of each\ntest, purge the database, load fixtures, begin a transaction, and, at the end of each test, roll back the\ntransaction previously begun. Because of this, you can run your tests without worrying about fixtures.</p>\n<p>All you have to do now is to run your tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php bin/phpunit</code></pre></div>\n<p>If everything is working properly, you should see <code class=\"language-text\">OK (6 tests, 27 assertions)</code>. Your Linked Data API is now specified\nand tested thanks to <a href=\"https://phpunit.de/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a>!</p>\n<h3 id=\"additional-and-alternative-testing-tools\" style=\"position:relative;\"><a href=\"#additional-and-alternative-testing-tools\" aria-label=\"additional and alternative testing tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional and Alternative Testing Tools</h3>\n<p>You may also be interested in these alternative testing tools (not included in the API Platform distribution):</p>\n<ul>\n<li><a href=\"https://github.com/lchrusciel/ApiTestCase\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ApiTestCase</a>, a handy <a href=\"https://phpunit.de/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a> test case\nfor going further by testing JSON and XML APIs in your Symfony applications;</li>\n<li><a href=\"http://behat.org/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Behat</a> and its <a href=\"https://github.com/Behatch/contexts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Behatch extension</a>, a\n<a href=\"https://en.wikipedia.org/wiki/Behavior-driven_development\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Behavior-Driven development</a> framework to write the API\nspecification as user stories and in natural language then execute these scenarios against the application to validate\nits behavior;</li>\n<li><a href=\"https://blackfire.io/player\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Blackfire Player</a>, a nice DSL to crawl HTTP services, assert responses, and extract data\nfrom HTML/XML/JSON responses (<a href=\"https://github.com/api-platform/demo/blob/master/test-api.bkf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">see example in API Platform Demo</a>);</li>\n<li><a href=\"https://www.getpostman.com/docs/writing_tests\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postman tests</a> (proprietary), create functional test for your API\nPlatform project using a nice UI, benefit from <a href=\"https://www.getpostman.com/docs/importing_swagger\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the Swagger integration</a>\nand run tests in the CI using <a href=\"https://github.com/postmanlabs/newman\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">newman</a>;</li>\n<li><a href=\"https://github.com/coduo/php-matcher\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHP Matcher</a>, the Swiss Army knife of JSON document testing.</li>\n</ul>\n<h2 id=\"writing-unit-tests\" style=\"position:relative;\"><a href=\"#writing-unit-tests\" aria-label=\"writing unit tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Unit Tests</h2>\n<p>Take a look at <a href=\"https://symfony.com/doc/current/testing.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the Symfony documentation about testing</a> to learn how to\nwrite unit tests with <a href=\"https://phpunit.de/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHPUnit</a> in your API Platform project.</p>","nav":{"chapters":[{"title":"The Distribution: Create Powerful APIs with Ease","path":"distribution","items":[{"id":"index","title":"Getting Started with API Platform: Hypermedia and GraphQL API, Admin and Progressive Web App","anchors":[{"id":"installing-the-framework","title":"Installing the Framework","anchors":[{"id":"using-the-api-platform-distribution-recommended","title":"Using the API Platform Distribution (Recommended)"},{"id":"using-symfony-flex-and-composer-advanced-users","title":"Using Symfony Flex and Composer (advanced users)"}]},{"id":"its-ready","title":"It's Ready!"},{"id":"bringing-your-own-model","title":"Bringing your Own Model"},{"id":"validating-data","title":"Validating Data"},{"id":"adding-graphql-support","title":"Adding GraphQL Support"},{"id":"the-admin","title":"The Admin"},{"id":"a-reactredux-progressive-web-app","title":"A React/Redux Progressive Web App"},{"id":"other-features","title":"Other Features"}]},{"id":"testing","title":"Testing and Specifying the API","anchors":[{"id":"creating-data-fixtures","title":"Creating Data Fixtures"},{"id":"writing-functional-tests","title":"Writing Functional Tests","anchors":[{"id":"additional-and-alternative-testing-tools","title":"Additional and Alternative Testing Tools"}]},{"id":"writing-unit-tests","title":"Writing Unit Tests"}]},{"id":"debugging","title":"Debugging","anchors":[{"id":"add-a-development-stage-to-the-dockerfile","title":"Add a Development Stage to the Dockerfile"},{"id":"configure-xdebug-with-docker-compose-override","title":"Configure Xdebug with Docker Compose Override"},{"id":"troubleshooting","title":"Troubleshooting"}]}]},{"title":"The API Component","path":"core","items":[{"id":"index","title":"The API Platform Core Library","anchors":[{"id":"features","title":"Features"},{"id":"other-resources","title":"Other resources"}]},{"id":"getting-started","title":"Getting started","anchors":[{"id":"installing-api-platform-core","title":"Installing API Platform Core"},{"id":"before-reading-this-documentation","title":"Before Reading this Documentation"},{"id":"mapping-the-entities","title":"Mapping the Entities"}]},{"id":"design","title":"General Design Considerations"},{"id":"operations","title":"Operations","anchors":[{"id":"enabling-and-disabling-operations","title":"Enabling and Disabling Operations"},{"id":"configuring-operations","title":"Configuring Operations","anchors":[{"id":"prefixing-all-routes-of-all-operations","title":"Prefixing All Routes of All Operations"}]},{"id":"subresources","title":"Subresources","anchors":[{"id":"control-the-path-of-subresources","title":"Control the Path of Subresources"},{"id":"access-control-of-subresources","title":"Access Control of Subresources"},{"id":"control-the-depth-of-subresources","title":"Control the Depth of Subresources"}]},{"id":"creating-custom-operations-and-controllers","title":"Creating Custom Operations and Controllers","anchors":[{"id":"recommended-method","title":"Recommended Method","anchors":[{"id":"serialization-groups","title":"Serialization Groups"},{"id":"entity-retrieval","title":"Entity Retrieval"}]},{"id":"alternative-method","title":"Alternative Method"}]}]},{"id":"graphql","title":"GraphQL Support","anchors":[{"id":"enabling-graphql","title":"Enabling GraphQL"},{"id":"graphiql","title":"GraphiQL"},{"id":"queries","title":"Queries","anchors":[{"id":"global-object-identifier","title":"Global Object Identifier"},{"id":"pagination","title":"Pagination"}]},{"id":"mutations","title":"Mutations","anchors":[{"id":"client-mutation-id","title":"Client Mutation Id"}]},{"id":"filters","title":"Filters","anchors":[{"id":"filtering-on-nested-properties","title":"Filtering on Nested Properties"}]},{"id":"security-access_control","title":"Security (access_control)"},{"id":"serialization-groups","title":"Serialization Groups"}]},{"id":"filters","title":"Filters","anchors":[{"id":"doctrine-orm-and-mongodb-odm-filters","title":"Doctrine ORM and MongoDB ODM Filters","anchors":[{"id":"basic-knowledge","title":"Basic Knowledge"},{"id":"search-filter","title":"Search Filter"},{"id":"date-filter","title":"Date Filter","anchors":[{"id":"managing-null-values","title":"Managing null Values"}]},{"id":"boolean-filter","title":"Boolean Filter"},{"id":"numeric-filter","title":"Numeric Filter"},{"id":"range-filter","title":"Range Filter"},{"id":"exists-filter","title":"Exists Filter"},{"id":"order-filter-sorting","title":"Order Filter (Sorting)","anchors":[{"id":"comparing-with-null-values","title":"Comparing with Null Values"},{"id":"using-a-custom-order-query-parameter-name","title":"Using a Custom Order Query Parameter Name"}]},{"id":"filtering-on-nested-properties","title":"Filtering on Nested Properties"},{"id":"enabling-a-filter-for-all-properties-of-a-resource","title":"Enabling a Filter for All Properties of a Resource"}]},{"id":"elasticsearch-filters","title":"Elasticsearch Filters","anchors":[{"id":"ordering-filter-sorting","title":"Ordering Filter (Sorting)","anchors":[{"id":"using-a-custom-order-query-parameter-name","title":"Using a Custom Order Query Parameter Name"}]},{"id":"match-filter","title":"Match Filter"},{"id":"term-filter","title":"Term Filter"},{"id":"filtering-on-nested-properties","title":"Filtering on Nested Properties"}]},{"id":"serializer-filters","title":"Serializer Filters","anchors":[{"id":"group-filter","title":"Group Filter"},{"id":"property-filter","title":"Property filter"}]},{"id":"creating-custom-filters","title":"Creating Custom Filters","anchors":[{"id":"creating-custom-doctrine-orm-filters","title":"Creating Custom Doctrine ORM Filters"},{"id":"creating-custom-doctrine-mongodb-odm-filters","title":"Creating Custom Doctrine MongoDB ODM Filters"},{"id":"creating-custom-elasticsearch-filters","title":"Creating Custom Elasticsearch Filters"},{"id":"using-doctrine-orm-filters","title":"Using Doctrine ORM Filters"}]},{"id":"apifilter-annotation","title":"ApiFilter Annotation"}]},{"id":"serialization","title":"The Serialization Process","anchors":[{"id":"overall-process","title":"Overall Process"},{"id":"available-serializers","title":"Available Serializers"},{"id":"the-serialization-context-groups-and-relations","title":"The Serialization Context, Groups and Relations","anchors":[{"id":"configuration","title":"Configuration"}]},{"id":"using-serialization-groups","title":"Using Serialization Groups"},{"id":"using-serialization-groups-per-operation","title":"Using Serialization Groups per Operation","anchors":[{"id":"embedding-relations","title":"Embedding Relations"},{"id":"denormalization","title":"Denormalization"}]},{"id":"changing-the-serialization-context-dynamically","title":"Changing the Serialization Context Dynamically"},{"id":"changing-the-serialization-context-on-a-per-item-basis","title":"Changing the Serialization Context on a Per-item Basis"},{"id":"name-conversion","title":"Name Conversion"},{"id":"decorating-a-serializer-and-adding-extra-data","title":"Decorating a Serializer and Adding Extra Data"},{"id":"entity-identifier-case","title":"Entity Identifier Case"},{"id":"embedding-the-json-ld-context","title":"Embedding the JSON-LD Context"},{"id":"collection-relation","title":"Collection Relation"}]},{"id":"validation","title":"Validation","anchors":[{"id":"validating-submitted-data","title":"Validating Submitted Data"},{"id":"using-validation-groups","title":"Using Validation Groups"},{"id":"using-validation-groups-on-operations","title":"Using Validation Groups on Operations"},{"id":"dynamic-validation-groups","title":"Dynamic Validation Groups"},{"id":"error-levels-and-payload-serialization","title":"Error Levels and Payload Serialization"},{"id":"validation-on-collection-relations","title":"Validation on Collection Relations"},{"id":"open-vocabulary-generated-from-validation-metadata","title":"Open Vocabulary Generated from Validation Metadata"}]},{"id":"security","title":"Security","anchors":[{"id":"configuring-the-access-control-message","title":"Configuring the Access Control Message"}]},{"id":"data-providers","title":"Data Providers","anchors":[{"id":"custom-collection-data-provider","title":"Custom Collection Data Provider"},{"id":"custom-item-data-provider","title":"Custom Item Data Provider"},{"id":"injecting-the-serializer-in-an-itemdataprovider","title":"Injecting the Serializer in an ItemDataProvider"},{"id":"injecting-extensions-pagination-filter-eagerloading-etc","title":"Injecting Extensions (Pagination, Filter, EagerLoading etc.)"}]},{"id":"data-persisters","title":"Data Persisters","anchors":[{"id":"creating-a-custom-data-persister","title":"Creating a Custom Data Persister"}]},{"id":"mercure","title":"Pushing Live Updates Using the Mercure Protocol","anchors":[{"id":"installing-mercure-support","title":"Installing Mercure Support"},{"id":"pushing-the-api-updates","title":"Pushing the API Updates"},{"id":"dispatching-private-updates-authorized-mode","title":"Dispatching Private Updates (Authorized Mode)"}]},{"id":"mongodb","title":"MongoDB Support","anchors":[{"id":"overview","title":"Overview"},{"id":"enabling-mongodb-support","title":"Enabling MongoDB Support"},{"id":"creating-documents","title":"Creating Documents"},{"id":"filtering","title":"Filtering"},{"id":"creating-custom-extensions","title":"Creating Custom Extensions"}]},{"id":"elasticsearch","title":"Elasticsearch Support","anchors":[{"id":"overview","title":"Overview"},{"id":"enabling-reading-support","title":"Enabling Reading Support"},{"id":"creating-models","title":"Creating Models","anchors":[{"id":"creating-custom-mapping","title":"Creating custom mapping"}]},{"id":"filtering","title":"Filtering"},{"id":"creating-custom-extensions","title":"Creating Custom Extensions"}]},{"id":"pagination","title":"Pagination","anchors":[{"id":"disabling-the-pagination","title":"Disabling the Pagination","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a specific resource"}]}]},{"id":"changing-the-number-of-items-per-page","title":"Changing the Number of Items per Page","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"}]}]},{"id":"changing-maximum-items-per-page","title":"Changing Maximum items per page","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"for-a-specific-resource-collection-operation","title":"For a Specific Resource Collection Operation"}]},{"id":"partial-pagination","title":"Partial Pagination","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"}]}]},{"id":"controlling-the-behavior-of-the-doctrine-orm-paginator","title":"Controlling the behavior of the Doctrine ORM Paginator"},{"id":"custom-controller-action","title":"Custom Controller Action"}]},{"id":"events","title":"The Event System","anchors":[{"id":"built-in-event-listeners","title":"Built-in Event Listeners"},{"id":"custom-event-listeners","title":"Custom Event Listeners"}]},{"id":"content-negotiation","title":"Content Negotiation","anchors":[{"id":"enabling-several-formats","title":"Enabling Several Formats"},{"id":"enabling-additional-formats-on-a-specific-resourceoperation","title":"Enabling Additional Formats On a Specific Resource/Operation"},{"id":"registering-a-custom-serializer","title":"Registering a Custom Serializer"},{"id":"writing-a-custom-normalizer","title":"Writing a Custom Normalizer"}]},{"id":"deprecations","title":"Deprecating Resources and Properties (Alternative to Versioning)","anchors":[{"id":"deprecating-resource-classes-operations-and-properties","title":"Deprecating Resource Classes, Operations and Properties"},{"id":"setting-the-sunset-http-header-to-indicate-when-a-resource-or-an-operation-will-be-removed","title":"Setting the Sunset HTTP Header to Indicate When a Resource or an Operation Will Be Removed"}]},{"id":"performance","title":"Performance and Cache","anchors":[{"id":"enabling-the-built-in-http-cache-invalidation-system","title":"Enabling the Built-in HTTP Cache Invalidation System","anchors":[{"id":"extending-cache-tags-for-invalidation","title":"Extending Cache-Tags for Invalidation"}]},{"id":"setting-custom-http-cache-headers","title":"Setting Custom HTTP Cache Headers"},{"id":"enabling-the-metadata-cache","title":"Enabling the Metadata Cache"},{"id":"using-ppm-php-pm","title":"Using PPM (PHP-PM)"},{"id":"doctrine-queries-and-indexes","title":"Doctrine Queries and Indexes","anchors":[{"id":"search-filter","title":"Search Filter"},{"id":"eager-loading","title":"Eager Loading","anchors":[{"id":"max-joins","title":"Max Joins"},{"id":"force-eager","title":"Force Eager"},{"id":"override-at-resource-and-operation-level","title":"Override at Resource and Operation Level"},{"id":"disable-eager-loading","title":"Disable Eager Loading"}]},{"id":"partial-pagination","title":"Partial Pagination"}]},{"id":"profiling-with-blackfireio","title":"Profiling with Blackfire.io"}]},{"id":"extensions","title":"Extensions","anchors":[{"id":"custom-doctrine-orm-extension","title":"Custom Doctrine ORM Extension","anchors":[{"id":"example","title":"Example","anchors":[{"id":"blocking-anonymous-users","title":"Blocking Anonymous Users"}]}]},{"id":"custom-doctrine-mongodb-odm-extension","title":"Custom Doctrine MongoDB ODM Extension"},{"id":"custom-elasticsearch-extension","title":"Custom Elasticsearch Extension"}]},{"id":"swagger","title":"OpenAPI Specification Support (formerly Swagger)","anchors":[{"id":"using-the-openapi-command","title":"Using the OpenAPI Command"},{"id":"overriding-the-openapi-specification","title":"Overriding the OpenAPI Specification"},{"id":"using-the-openapi-and-swagger-contexts","title":"Using the OpenAPI and Swagger Contexts"},{"id":"changing-the-name-of-a-definition","title":"Changing the Name of a Definition"},{"id":"changing-operations-in-the-openapi-documentation","title":"Changing Operations in the OpenAPI Documentation"},{"id":"changing-the-location-of-swagger-ui","title":"Changing the Location of Swagger UI","anchors":[{"id":"disabling-swagger-ui-or-redoc","title":"Disabling Swagger UI or ReDoc"},{"id":"manually-registering-the-swagger-ui-controller","title":"Manually Registering the Swagger UI Controller"}]},{"id":"overriding-the-ui-template","title":"Overriding the UI Template"},{"id":"compatibilily-layer-with-amazon-api-gateway","title":"Compatibilily Layer with Amazon API Gateway"}]},{"id":"messenger","title":"Symfony Messenger Integration: CQRS and Async Message Processing","anchors":[{"id":"installing-symfony-messenger","title":"Installing Symfony Messenger"},{"id":"dispatching-a-resource-through-the-message-bus","title":"Dispatching a Resource through the Message Bus"},{"id":"registering-a-message-handler","title":"Registering a Message Handler"},{"id":"accessing-the-data-returned-by-the-handler","title":"Accessing the Data Returned by the Handler"},{"id":"detecting-removals","title":"Detecting Removals"},{"id":"using-messenger-with-an-input-object","title":"Using Messenger with an Input Object"}]},{"id":"dto","title":"Using Data Transfer Objects (DTOs)","anchors":[{"id":"specifying-an-input-or-an-output-data-representation","title":"Specifying an Input or an Output Data Representation"},{"id":"updating-a-resource-with-a-custom-input","title":"Updating a Resource with a Custom Input"},{"id":"disabling-the-input-or-the-output","title":"Disabling the Input or the Output"},{"id":"per-operation-input-and-output","title":"Per Operation input and output"},{"id":"inputoutput-metadata","title":"Input/Output Metadata"},{"id":"using-objects-as-relations-inside-resources","title":"Using Objects As Relations Inside Resources"},{"id":"validating-data-transfer-objects","title":"Validating Data Transfer Objects"}]},{"id":"push-relations","title":"Pushing Related Resources Using HTTP/2"},{"id":"file-upload","title":"Handling File Upload","anchors":[{"id":"installing-vichuploaderbundle","title":"Installing VichUploaderBundle"},{"id":"configuring-the-entity-receiving-the-uploaded-file","title":"Configuring the Entity Receiving the Uploaded File"},{"id":"handling-file-upload","title":"Handling File Upload"},{"id":"resolving-the-file-url","title":"Resolving the File URL"},{"id":"making-a-request-to-the-media_objects-endpoint","title":"Making a Request to the /media_objects Endpoint"},{"id":"linking-a-mediaobject-resource-to-another-resource","title":"Linking a MediaObject Resource to Another Resource"}]},{"id":"default-order","title":"Overriding Default Order"},{"id":"errors","title":"Errors Handling","anchors":[{"id":"converting-php-exceptions-to-http-errors","title":"Converting PHP Exceptions to HTTP Errors"}]},{"id":"external-vocabularies","title":"Using External Vocabularies"},{"id":"operation-path-naming","title":"Operation Path Naming","anchors":[{"id":"configuration","title":"Configuration"},{"id":"create-a-custom-operation-path-resolver","title":"Create a Custom Operation Path Resolver","anchors":[{"id":"defining-the-operation-path-resolver","title":"Defining the Operation Path Resolver"},{"id":"registering-the-service","title":"Registering the Service"},{"id":"configuring-it","title":"Configuring It"}]}]},{"id":"extending-jsonld-context","title":"Extending JSON-LD Context"},{"id":"form-data","title":"Accept application/x-www-form-urlencoded Form Data","anchors":[{"id":"create-your-deserializelistener-decorator","title":"Create your DeserializeListener Decorator"},{"id":"creating-the-service-definition","title":"Creating the Service Definition"}]},{"id":"identifiers","title":"Identifiers","anchors":[{"id":"custom-identifier-normalizer","title":"Custom Identifier Normalizer"},{"id":"supported-identifiers","title":"Supported Identifiers"}]},{"id":"jwt","title":"JWT Authentication","anchors":[{"id":"installing-lexikjwtauthenticationbundle","title":"Installing LexikJWTAuthenticationBundle"},{"id":"configuring-the-symfony-securitybundle","title":"Configuring the Symfony SecurityBundle","anchors":[{"id":"adding-authentication-to-an-api-which-uses-a-path-prefix","title":"Adding Authentication to an API Which Uses a Path Prefix"}]},{"id":"documenting-the-authentication-mechanism-with-swaggeropen-api","title":"Documenting the Authentication Mechanism with Swagger/Open API","anchors":[{"id":"configuring-api-platform","title":"Configuring API Platform"},{"id":"adding-a-new-api-key","title":"Adding a New API Key"}]},{"id":"testing-with-behat","title":"Testing with Behat"}]},{"id":"angularjs-integration","title":"AngularJS Integration","anchors":[{"id":"restangular","title":"Restangular"},{"id":"ng-admin","title":"ng-admin"}]},{"id":"fosuser-bundle","title":"FOSUserBundle Integration","anchors":[{"id":"installing-the-bundle","title":"Installing the Bundle"},{"id":"enabling-the-bridge","title":"Enabling the Bridge"},{"id":"creating-a-user-entity-with-serialization-groups","title":"Creating a User Entity with Serialization Groups"}]},{"id":"nelmio-api-doc","title":"NelmioApiDocBundle Integration"},{"id":"configuration","title":"Configuration"}]},{"title":"The Schema Generator Component","path":"schema-generator","items":[{"id":"index","title":"The Schema Generator","anchors":[{"id":"what-is-schemaorg","title":"What Is Schema.org?"},{"id":"why-use-schemaorg-data-to-generate-a-php-model","title":"Why Use Schema.org Data to Generate a PHP Model?","anchors":[{"id":"dont-reinvent-the-wheel","title":"Don't Reinvent the Wheel"},{"id":"improve-seo-and-user-experience","title":"Improve SEO and User Experience"},{"id":"be-ready-for-the-future","title":"Be Ready for The Future"}]},{"id":"documentation","title":"Documentation"}]},{"id":"getting-started","title":"Getting Started","anchors":[{"id":"installation","title":"Installation"},{"id":"model-scaffolding","title":"Model Scaffolding","anchors":[{"id":"going-further","title":"Going Further"}]},{"id":"cardinality-extraction","title":"Cardinality Extraction"}]},{"id":"configuration","title":"Configuration","anchors":[{"id":"customizing-php-namespaces","title":"Customizing PHP Namespaces"},{"id":"forcing-a-field-range","title":"Forcing a Field Range"},{"id":"forcing-a-field-cardinality","title":"Forcing a Field Cardinality"},{"id":"forcing-a-relation-table-name","title":"Forcing a Relation Table Name"},{"id":"forcing-or-disabling-a-class-parent","title":"Forcing (or Disabling) a Class Parent"},{"id":"forcing-a-class-to-be-abstract","title":"Forcing a Class to be Abstract"},{"id":"forcing-a-nullable-property","title":"Forcing a Nullable Property"},{"id":"forcing-a-unique-property","title":"Forcing a Unique Property"},{"id":"making-a-property-read-only","title":"Making a Property Read-Only"},{"id":"making-a-property-write-only","title":"Making a Property Write-Only"},{"id":"forcing-a-property-to-be-in-a-serialization-group","title":"Forcing a Property to be in a Serialization Group"},{"id":"forcing-an-embeddable-class-to-be-embedded","title":"Forcing an Embeddable Class to be Embedded"},{"id":"author-phpdoc","title":"Author PHPDoc"},{"id":"disabling-generators-and-creating-custom-ones","title":"Disabling Generators and Creating Custom Ones"},{"id":"skipping-accessor-method-generation","title":"Skipping Accessor Method Generation"},{"id":"disabling-the-id-generator","title":"Disabling the id Generator"},{"id":"generating-uuids","title":"Generating UUIDs"},{"id":"user-submitted-uuids","title":"User submitted UUIDs"},{"id":"generating-custom-ids","title":"Generating Custom IDs"},{"id":"disabling-usage-of-doctrine-collections","title":"Disabling Usage of Doctrine Collections"},{"id":"changing-the-field-visibility","title":"Changing the Field Visibility"},{"id":"generating-asserttype-annotations","title":"Generating @Assert\\Type Annotations"},{"id":"forcing-doctrine-inheritance-mapping-annotation","title":"Forcing Doctrine Inheritance Mapping Annotation"},{"id":"interfaces-and-doctrine-resolve-target-entity-listener","title":"Interfaces and Doctrine Resolve Target Entity Listener"},{"id":"custom-schemas","title":"Custom Schemas"},{"id":"checking-goodrelation-compatibility","title":"Checking GoodRelation Compatibility"},{"id":"php-file-header","title":"PHP File Header"},{"id":"full-configuration-reference","title":"Full Configuration Reference"}]}]},{"title":"The Admin Component","path":"admin","items":[{"id":"index","title":"The API Platform Admin","anchors":[{"id":"features","title":"Features"}]},{"id":"getting-started","title":"Getting Started","anchors":[{"id":"installation","title":"Installation"},{"id":"creating-the-admin","title":"Creating the Admin"},{"id":"customizing-the-admin","title":"Customizing the Admin","anchors":[{"id":"using-custom-components","title":"Using Custom Components"},{"id":"managing-files-and-images","title":"Managing Files and Images"},{"id":"using-a-custom-validation-function-or-inject-custom-props","title":"Using a Custom Validation Function or Inject Custom Props"},{"id":"show-the-names-of-your-entities-instead-of-their-iris","title":"Show the Names of your Entities Instead of their IRIs"},{"id":"using-the-hydra-data-provider-directly-with-react-admin","title":"Using the Hydra Data Provider Directly with react-admin"}]}]},{"id":"authentication-support","title":"Authentication Support"},{"id":"handling-relations-to-collections","title":"Handling Relations to Collections","anchors":[{"id":"customizing-a-property","title":"Customizing a Property"},{"id":"customizing-an-icon","title":"Customizing an Icon"},{"id":"using-an-autocomplete-input-for-relations","title":"Using an Autocomplete Input for Relations"}]},{"id":"customizing","title":"Customizing the Admin","anchors":[{"id":"preparing-your-app","title":"Preparing your App"},{"id":"customizing-inputs","title":"Customizing Inputs"},{"id":"customizing-fields","title":"Customizing Fields"},{"id":"free-mode","title":"\"Free\" Mode"},{"id":"reusing-the-default-layout","title":"Reusing the Default Layout","anchors":[{"id":"list","title":"List"},{"id":"create","title":"Create","anchors":[{"id":"customizing-the-form-layout","title":"Customizing the Form Layout"},{"id":"dynamic-display","title":"Dynamic Display"}]},{"id":"edit","title":"Edit"}]}]}]},{"title":"The Client Generator Component","path":"client-generator","items":[{"id":"index","title":"The API Platform Client Generator","anchors":[{"id":"features","title":"Features"}]},{"id":"react","title":"React Generator","anchors":[{"id":"install","title":"Install"},{"id":"generating-a-progressive-web-app","title":"Generating a Progressive Web App"},{"id":"screenshots","title":"Screenshots"}]},{"id":"nextjs","title":"Next.js Generator","anchors":[{"id":"install","title":"Install","anchors":[{"id":"next--express-server","title":"Next + Express Server"},{"id":"enabling-typescript","title":"Enabling Typescript"},{"id":"installing-the-generator-dependencies","title":"Installing the Generator Dependencies"}]},{"id":"starting-the-project","title":"Starting the Project"},{"id":"generating-routes","title":"Generating Routes"},{"id":"screenshots","title":"Screenshots"}]},{"id":"react-native","title":"React Native generator","anchors":[{"id":"install","title":"Install"},{"id":"generating-a-native-app","title":"Generating a Native App"},{"id":"screenshots-in-ios-simulator","title":"Screenshots in iOS Simulator"}]},{"id":"vuejs","title":"Vue.js Generator"},{"id":"quasar","title":"Quasar Framework Generator"},{"id":"typescript","title":"Typescript Interfaces","anchors":[{"id":"example","title":"Example"}]},{"id":"troubleshooting","title":"Troubleshooting"}]},{"title":"Deployment","path":"deployment","items":[{"id":"index","title":"Deploying API Platform Applications"},{"id":"kubernetes","title":"Deploying to a Kubernetes Cluster","anchors":[{"id":"preparing-your-cluster-and-your-local-machine","title":"Preparing Your Cluster and Your Local Machine"},{"id":"creating-and-publishing-the-docker-images","title":"Creating and Publishing the Docker Images"},{"id":"deploying","title":"Deploying"},{"id":"initializing-the-database","title":"Initializing the Database"},{"id":"tiller-rbac-issue","title":"Tiller RBAC Issue"}]},{"id":"heroku","title":"Deploying an API Platform App on Heroku"},{"id":"traefik","title":"Implement Traefik Into API Platform Dockerized","anchors":[{"id":"basic-implementation","title":"Basic Implementation"},{"id":"known-issues","title":"Known Issues"},{"id":"going-further","title":"Going Further"}]}]},{"title":"Extra","path":"extra","items":[{"id":"releases","title":"The Release Process"},{"id":"philosophy","title":"API Platform's Philosophy"},{"id":"troubleshooting","title":"Troubleshooting","anchors":[{"id":"using-docker","title":"Using Docker","anchors":[{"id":"with-docker-toolbox-on-windows","title":"With Docker Toolbox on Windows"},{"id":"error-starting-userland-proxy","title":"Error starting userland proxy"}]},{"id":"using-api-platform-and-jms-serializer-in-the-same-project","title":"Using API Platform and JMS Serializer in the same project"},{"id":"upstream-sent-too-big-header-while-reading-response-header-from-upstream-502-error","title":"\"upstream sent too big header while reading response header from upstream\" 502 Error"}]},{"id":"contribution-guides","title":"Contribution guides"},{"id":"conduct","title":"Contributor Code of Conduct","anchors":[{"id":"our-pledge","title":"Our Pledge"},{"id":"our-standards","title":"Our Standards"},{"id":"our-responsibilities","title":"Our Responsibilities"},{"id":"scope","title":"Scope"},{"id":"enforcement","title":"Enforcement"},{"id":"attribution","title":"Attribution"}]}]}]},"next":{"slug":"/docs/v2.4/distribution/debugging/","title":"Debugging"},"prefixedVersion":"v2.4","previous":{"slug":"/docs/v2.4/distribution/","title":"Getting Started with API Platform: Hypermedia and GraphQL API, Admin and Progressive Web App"},"title":"Testing and Specifying the API","urlEditDocumentation":"https://github.com/api-platform/docs/edit/2.4/distribution/testing.md","version":"v2.4/"}}}