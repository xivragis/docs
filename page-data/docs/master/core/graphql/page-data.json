{"componentChunkName":"component---src-templates-doc-js","path":"/docs/master/core/graphql/","result":{"pageContext":{"html":"<h1 id=\"graphql-support\" style=\"position:relative;\"><a href=\"#graphql-support\" aria-label=\"graphql support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL Support</h1>\n<p><a href=\"https://graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL</a> is a query language made to communicate with an API and therefore is an alternative to REST.</p>\n<p>It has some advantages compared to REST: it solves the over-fetching or under-fetching of data, is strongly typed, and is capable of retrieving multiple and nested data in one go, but it also comes with drawbacks. For example it creates overhead depending on the request.</p>\n<p>API Platform creates a REST API by default. But you can choose to enable GraphQL as well.</p>\n<p>Once enabled, you have nothing to do: your schema describing your API is automatically built and your GraphQL endpoint is ready to go!</p>\n<h2 id=\"enabling-graphql\" style=\"position:relative;\"><a href=\"#enabling-graphql\" aria-label=\"enabling graphql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enabling GraphQL</h2>\n<p>To enable GraphQL and its IDE (GraphiQL and GraphQL Playground) in your API, simply require the <a href=\"https://webonyx.github.io/graphql-php/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">graphql-php</a> package using Composer and clear the cache one more time:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker-compose exec php composer req webonyx/graphql-php &amp;&amp; docker-compose exec php bin/console cache:clear</code></pre></div>\n<p>You can now use GraphQL at the endpoint: <code class=\"language-text\">https://localhost:8443/graphql</code>.</p>\n<p><em>Note:</em> If you used <a href=\"/docs/master/distribution/#using-symfony-flex-and-composer-advanced-users\">Symfony Flex to install API Platform</a>,\nthe GraphQL endpoint will be: <code class=\"language-text\">https://localhost:8443/api/graphql</code>.</p>\n<h2 id=\"graphiql\" style=\"position:relative;\"><a href=\"#graphiql\" aria-label=\"graphiql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphiQL</h2>\n<p>If Twig is installed in your project, go to the GraphQL endpoint with your browser. You will see a nice interface provided by GraphiQL to interact with your API.</p>\n<p>The GraphiQL IDE can also be found at <code class=\"language-text\">/graphql/graphiql</code>.</p>\n<p>If you need to disable it, it can be done in the configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">graphql</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">graphiql</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token comment\"># ...</span></code></pre></div>\n<h3 id=\"add-another-location-for-graphiql\" style=\"position:relative;\"><a href=\"#add-another-location-for-graphiql\" aria-label=\"add another location for graphiql permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add another Location for GraphiQL</h3>\n<p>If you want to add a different location besides <code class=\"language-text\">/graphql/graphiql</code>, you can do it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/routes.yaml</span>\n<span class=\"token key atrule\">graphiql</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /docs/graphiql\n    <span class=\"token key atrule\">controller</span><span class=\"token punctuation\">:</span> api_platform.graphql.action.graphiql</code></pre></div>\n<h2 id=\"graphql-playground\" style=\"position:relative;\"><a href=\"#graphql-playground\" aria-label=\"graphql playground permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GraphQL Playground</h2>\n<p>Another IDE is by default included in API Platform: GraphQL Playground.</p>\n<p>It can be found at <code class=\"language-text\">/graphql/graphql_playground</code>.</p>\n<p>You can disable it if you want in the configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">graphql</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">graphql_playground</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token comment\"># ...</span></code></pre></div>\n<h3 id=\"add-another-location-for-graphql-playground\" style=\"position:relative;\"><a href=\"#add-another-location-for-graphql-playground\" aria-label=\"add another location for graphql playground permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add another Location for GraphQL Playground</h3>\n<p>You can add a different location besides <code class=\"language-text\">/graphql/graphql_playground</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/routes.yaml</span>\n<span class=\"token key atrule\">graphql_playground</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /docs/graphql_playground\n    <span class=\"token key atrule\">controller</span><span class=\"token punctuation\">:</span> api_platform.graphql.action.graphql_playground</code></pre></div>\n<h2 id=\"modifying-or-disabling-the-default-ide\" style=\"position:relative;\"><a href=\"#modifying-or-disabling-the-default-ide\" aria-label=\"modifying or disabling the default ide permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modifying or Disabling the Default IDE</h2>\n<p>When going to the GraphQL endpoint, you can choose to launch the IDE you want.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">graphql</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Choose between graphiql or graphql-playground</span>\n        <span class=\"token key atrule\">default_ide</span><span class=\"token punctuation\">:</span> graphql<span class=\"token punctuation\">-</span>playground\n<span class=\"token comment\"># ...</span></code></pre></div>\n<p>You can also disable this feature by setting the configuration value to <code class=\"language-text\">false</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">graphql</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">default_ide</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token comment\"># ...</span></code></pre></div>\n<h2 id=\"request-with-applicationgraphql-content-type\" style=\"position:relative;\"><a href=\"#request-with-applicationgraphql-content-type\" aria-label=\"request with applicationgraphql content type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request with <code class=\"language-text\">application/graphql</code> Content-Type</h2>\n<p>If you wish to send a <a href=\"https://graphql.org/learn/serving-over-http/#post-request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">POST request using the <code class=\"language-text\">application/graphql</code> Content-Type</a>,\nyou need to enable it in the <a href=\"/docs/master/core/content-negotiation/#configuring-formats-globally\">allowed formats of API Platform</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">formats</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># ...</span>\n        <span class=\"token key atrule\">graphql</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'application/graphql'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"queries\" style=\"position:relative;\"><a href=\"#queries\" aria-label=\"queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Queries</h2>\n<p>If you don't know what queries are yet, please <a href=\"https://graphql.org/learn/queries/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">read the documentation about them</a>.</p>\n<p>For each resource, two queries are available: one for retrieving an item and the other one for the collection.\nFor example, if you have a <code class=\"language-text\">Book</code> resource, the queries <code class=\"language-text\">book</code> and <code class=\"language-text\">books</code> can be used.</p>\n<h3 id=\"global-object-identifier\" style=\"position:relative;\"><a href=\"#global-object-identifier\" aria-label=\"global object identifier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Global Object Identifier</h3>\n<p>When querying an item, you need to pass an identifier as argument. Following the <a href=\"https://relay.dev/graphql/objectidentification.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL Global Object Identification Specification</a>,\nthe identifier needs to be globally unique. In API Platform, this argument is represented as an <a href=\"https://www.w3.org/TR/ld-glossary/#internationalized-resource-identifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IRI (Internationalized Resource Identifier)</a>.</p>\n<p>For example, to query a book having as identifier <code class=\"language-text\">89</code>, you have to run the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  book<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/books/89\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n    isbn\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that in this example, we're retrieving two fields: <code class=\"language-text\">title</code> and <code class=\"language-text\">isbn</code>.</p>\n<h3 id=\"custom-queries\" style=\"position:relative;\"><a href=\"#custom-queries\" aria-label=\"custom queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Queries</h3>\n<p>To create a custom query, first of all you need to create its resolver.</p>\n<p>If you want a custom query for a collection, create a class like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Resolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Resolver<span class=\"token punctuation\">\\</span>QueryCollectionResolverInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Model<span class=\"token punctuation\">\\</span>Book</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookCollectionResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">QueryCollectionResolverInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * @param iterable&lt;Book> $collection\n     *\n     * @return iterable&lt;Book>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span>iterable <span class=\"token variable\">$collection</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> iterable\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Query arguments are in $context['args'].</span>\n\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Do something with the book.</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>If you use autoconfiguration (the default Symfony configuration) in your application, then you are done!</p>\n<p>Else, you need to tag your resolver like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/services.yaml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token key atrule\">App\\Resolver\\BookCollectionResolver</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> api_platform.graphql.query_resolver <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The resolver for an item is very similar:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Resolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Resolver<span class=\"token punctuation\">\\</span>QueryItemResolverInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Model<span class=\"token punctuation\">\\</span>Book</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">QueryItemResolverInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * @param Book|null $item\n     *\n     * @return Book\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Query arguments are in $context['args'].</span>\n\n        <span class=\"token comment\">// Do something with the book.</span>\n        <span class=\"token comment\">// Or fetch the book if it has not been retrieved.</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Note that you will receive the retrieved item or not in this resolver depending on how you configure your query in your resource.</p>\n<p>Since the resolver is a service, you can inject some dependencies and fetch your item in the resolver if you want.</p>\n<p>If you don't use autoconfiguration, don't forget to tag your resolver with <code class=\"language-text\">api_platform.graphql.query_resolver</code>.</p>\n<p>Now that your resolver is created and registered, you can configure your custom query and link its resolver.</p>\n<p>In your resource, add the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Resolver<span class=\"token punctuation\">\\</span>BookCollectionResolver</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Resolver<span class=\"token punctuation\">\\</span>BookResolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(graphql={\n *     \"retrievedQuery\"={\n *         \"item_query\"=BookResolver::class\n *     },\n *     \"notRetrievedQuery\"={\n *         \"item_query\"=BookResolver::class,\n *         \"args\"={}\n *     },\n *     \"withDefaultArgsNotRetrievedQuery\"={\n *         \"item_query\"=BookResolver::class,\n *         \"read\"=false\n *     },\n *     \"withCustomArgsQuery\"={\n *         \"item_query\"=BookResolver::class,\n *         \"args\"={\n *             \"id\"={\"type\"=\"ID!\"},\n *             \"log\"={\"type\"=\"Boolean!\", \"description\"=\"Is logging activated?\"},\n *             \"logDate\"={\"type\"=\"DateTime\"}\n *         }\n *     },\n *     \"collectionQuery\"={\n *         \"collection_query\"=BookCollectionResolver::class\n *     }\n * })\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>As you can see, it's possible to define your own arguments for your custom queries.\nThey are following the GraphQL type system.\nIf you don't define the <code class=\"language-text\">args</code> property, it will be the default ones (for example <code class=\"language-text\">id</code> for an item).</p>\n<p>If you don't want API Platform to retrieve the item for you, disable the <code class=\"language-text\">read</code> stage like in <code class=\"language-text\">withDefaultArgsNotRetrievedQuery</code>.\nSome other stages <a href=\"#disabling-resolver-stages\">can be disabled</a>.\nAnother option would be to make sure there is no <code class=\"language-text\">id</code> argument.\nThis is the case for <code class=\"language-text\">notRetrievedQuery</code> (empty args).\nConversely, if you need to add custom arguments, make sure <code class=\"language-text\">id</code> is added among the arguments if you need the item to be retrieved automatically.</p>\n<p>Note also that:</p>\n<ul>\n<li>If you have added your <a href=\"#custom-types\">own custom types</a>, you can use them directly for your arguments types (it's the case here for <code class=\"language-text\">DateTime</code>).</li>\n<li>You can also add a custom description for your custom arguments. You can see the <a href=\"https://webonyx.github.io/graphql-php/type-system/object-types/#field-arguments\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">field arguments documentation</a> for more options.</li>\n</ul>\n<p>The arguments you have defined or the default ones and their value will be in <code class=\"language-text\">$context[&#39;args&#39;]</code> of your resolvers.</p>\n<p>You custom queries will be available like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  retrievedQueryBook<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/books/56\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n  <span class=\"token punctuation\">}</span>\n\n  notRetrievedQueryBook <span class=\"token punctuation\">{</span>\n    title\n  <span class=\"token punctuation\">}</span>\n\n  withDefaultArgsNotRetrievedQueryBook<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/books/56\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n  <span class=\"token punctuation\">}</span>\n\n  withCustomArgsQueryBook<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/books/23\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">log</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">logDate</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2019-12-20\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n  <span class=\"token punctuation\">}</span>\n\n  collectionQueryBooks <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        title\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"mutations\" style=\"position:relative;\"><a href=\"#mutations\" aria-label=\"mutations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutations</h2>\n<p>If you don't know what mutations are yet, the documentation about them is <a href=\"https://graphql.org/learn/queries/#mutations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>For each resource, three mutations are available: one for creating it (<code class=\"language-text\">create</code>), one for updating it (<code class=\"language-text\">update</code>) and one for deleting it (<code class=\"language-text\">delete</code>).</p>\n<p>When updating or deleting a resource, you need to pass the <strong>IRI</strong> of the resource as argument. See <a href=\"#global-object-identifier\">Global Object Identifier</a> for more information.</p>\n<h3 id=\"client-mutation-id\" style=\"position:relative;\"><a href=\"#client-mutation-id\" aria-label=\"client mutation id permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Client Mutation Id</h3>\n<p>Following the <a href=\"https://github.com/facebook/relay/blob/v7.1.0/website/spec/Mutations.md#relay-input-object-mutations-specification\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Relay Input Object Mutations Specification</a>,\nyou can pass a <code class=\"language-text\">clientMutationId</code> as argument and can ask its value as a field.</p>\n<p>For example, if you delete a book:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">mutation</span> DeleteBook<span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$clientMutationId</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  deleteBook<span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">clientMutationId</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$clientMutationId</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    clientMutationId\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"custom-mutations\" style=\"position:relative;\"><a href=\"#custom-mutations\" aria-label=\"custom mutations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Mutations</h3>\n<p>Creating custom mutations is comparable to creating <a href=\"#custom-queries\">custom queries</a>.</p>\n<p>Create your resolver:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Resolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Resolver<span class=\"token punctuation\">\\</span>MutationResolverInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Model<span class=\"token punctuation\">\\</span>Book</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookMutationResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MutationResolverInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * @param Book|null $item\n     *\n     * @return Book\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Mutation input arguments are in $context['args']['input'].</span>\n\n        <span class=\"token comment\">// Do something with the book.</span>\n        <span class=\"token comment\">// Or fetch the book if it has not been retrieved.</span>\n\n        <span class=\"token comment\">// The returned item will pe persisted.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>As you can see, depending on how you configure your custom mutation in the resource, the item is retrieved or not.\nFor instance, if you don't set an <code class=\"language-text\">id</code> argument or if you disable the <code class=\"language-text\">read</code> or the <code class=\"language-text\">deserialize</code> stage (other stages <a href=\"#disabling-resolver-stages\">can also be disabled</a>),\nthe received item will be <code class=\"language-text\">null</code>.</p>\n<p>Likewise, if you don't want your item to be persisted by API Platform,\nyou can return <code class=\"language-text\">null</code> instead of the mutated item (be careful: the response will also be <code class=\"language-text\">null</code>) or disable the <code class=\"language-text\">write</code> stage.</p>\n<p>Don't forget the resolver is a service and you can inject the dependencies you want.</p>\n<p>If you don't use autoconfiguration, add the tag <code class=\"language-text\">api_platform.graphql.mutation_resolver</code> to the resolver service.</p>\n<p>Now in your resource:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Resolver<span class=\"token punctuation\">\\</span>BookMutationResolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(graphql={\n *     \"mutation\"={\n *         \"mutation\"=BookMutationResolver::class\n *     },\n *     \"withCustomArgsMutation\"={\n *         \"mutation\"=BookMutationResolver::class,\n *         \"args\"={\n *             \"sendMail\"={\"type\"=\"Boolean!\", \"description\"=\"Send a mail?\"}\n *         }\n *     },\n *     \"disabledStagesMutation\"={\n *         \"mutation\"=BookMutationResolver::class,\n *         \"deserialize\"=false,\n *         \"write\"=false\n *     }\n * })\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>As the custom queries, you can define your own arguments if you don't want to use the default ones (extracted from your resource).\nThe only difference with them is that, even if you define your own arguments, the <code class=\"language-text\">clientMutationId</code> will always be set.</p>\n<p>The arguments will be in <code class=\"language-text\">$context[&#39;args&#39;][&#39;input&#39;]</code> of your resolvers.</p>\n<p>Your custom mutations will be available like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">mutation</span> <span class=\"token punctuation\">{</span>\n    mutationBook<span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/books/18\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Fitz and the Fool\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      book <span class=\"token punctuation\">{</span>\n        title\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">mutation</span> <span class=\"token punctuation\">{</span>\n    withCustomArgsMutationBook<span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">sendMail</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">clientMutationId</span><span class=\"token punctuation\">:</span> \"myId<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      book <span class=\"token punctuation\">{</span>\n        title\n      <span class=\"token punctuation\">}</span>\n      clientMutationId\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">mutation</span> <span class=\"token punctuation\">{</span>\n    disabledStagesMutationBook<span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/books/18\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Fitz and the Fool\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      book <span class=\"token punctuation\">{</span>\n        title\n      <span class=\"token punctuation\">}</span>\n      clientMutationId\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"subscriptions\" style=\"position:relative;\"><a href=\"#subscriptions\" aria-label=\"subscriptions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscriptions</h2>\n<p>Subscriptions are an <a href=\"https://github.com/graphql/graphql-spec/blob/master/rfcs/Subscriptions.md#rfc-graphql-subscriptions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC</a> to allow a client to receive pushed realtime data from the server.</p>\n<p>In API Platform, the built-in subscription support is handled by using <a href=\"https://mercure.rocks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mercure</a> as its underlying protocol.</p>\n<h3 id=\"enable-update-subscriptions-for-a-resource\" style=\"position:relative;\"><a href=\"#enable-update-subscriptions-for-a-resource\" aria-label=\"enable update subscriptions for a resource permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enable Update Subscriptions for a Resource</h3>\n<p>To enable update subscriptions for a resource, three conditions have to be met:</p>\n<ul>\n<li>the <a href=\"/docs/master/core/mercure/#installing-mercure-support\">Mercure hub and bundle need to be installed and configured</a>.</li>\n<li>Mercure needs to be enabled for the resource.</li>\n<li>the <code class=\"language-text\">update</code> mutation needs to be enabled for the resource.</li>\n</ul>\n<p>For instance, your resource should look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n *     graphql={\n *         ...\n *         \"update\",\n *         ...\n *     },\n *     mercure=true\n * )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h3 id=\"subscribe\" style=\"position:relative;\"><a href=\"#subscribe\" aria-label=\"subscribe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscribe</h3>\n<p>Doing a subscription is very similar to doing a query:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  subscription <span class=\"token punctuation\">{</span>\n    updateBookSubscribe<span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/books/1\"</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">clientSubscriptionId</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"myId\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      book <span class=\"token punctuation\">{</span>\n        title\n        isbn\n      <span class=\"token punctuation\">}</span>\n      mercureUrl\n      clientSubscriptionId\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, you need to pass the <strong>IRI</strong> of the resource as argument. See <a href=\"#global-object-identifier\">Global Object Identifier</a> for more information.</p>\n<p>You can also pass <code class=\"language-text\">clientSubscriptionId</code> as argument and can ask its value as a field.</p>\n<p>In the payload of the subscription, the given fields of the resource will be the fields you subscribe to: if any of these fields is updated, you will be pushed their updated values.</p>\n<p>The <code class=\"language-text\">mercureUrl</code> field is the Mercure URL you need to use to <a href=\"https://mercure.rocks/docs/getting-started#subscribing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">subscribe to the updates</a> on the client side.</p>\n<h3 id=\"receiving-an-update\" style=\"position:relative;\"><a href=\"#receiving-an-update\" aria-label=\"receiving an update permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Receiving an Update</h3>\n<p>On the client side, you will receive the pushed updated data like you would receive the updated data if you did an <code class=\"language-text\">update</code> mutation.</p>\n<p>For instance, you could receive a JSON payload like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"book\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Updated title\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"isbn\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"978-6-6344-4051-1\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"subscriptions-cache\" style=\"position:relative;\"><a href=\"#subscriptions-cache\" aria-label=\"subscriptions cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscriptions Cache</h3>\n<p>Internally, API Platform stores the subscriptions in a cache, using the <a href=\"https://symfony.com/doc/current/cache.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Symfony Cache</a>.</p>\n<p>The cache is named <code class=\"language-text\">api_platform.graphql.cache.subscription</code> and the subscription keys are generated from the subscription payload by using a SHA-256 hash.</p>\n<p>It's recommended to use an adapter like Redis for this cache.</p>\n<h2 id=\"workflow-of-the-resolvers\" style=\"position:relative;\"><a href=\"#workflow-of-the-resolvers\" aria-label=\"workflow of the resolvers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Workflow of the Resolvers</h2>\n<p>API Platform resolves the queries and mutations by using its own <strong>resolvers</strong>.</p>\n<p>Even if you create your <a href=\"#custom-queries\">custom queries</a> or your <a href=\"#custom-mutations\">custom mutations</a>,\nthese resolvers will be used and yours will be called at the right time.</p>\n<p>Each resolver follows a workflow composed of <strong>stages</strong>.</p>\n<p>The schema below describes them:</p>\n<p><img src=\"/677443f6df3ed0cabf1509ddf87209cc/resolvers-workflow.svg\" alt=\"Resolvers Workflow\"></p>\n<p>Each stage corresponds to a service. It means you can take control of the workflow wherever you want by decorating them!</p>\n<p>Here is an example of the decoration of the write stage, for instance if you want to persist your data as you want.</p>\n<p>Create your <em>WriteStage</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Stage</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Resolver<span class=\"token punctuation\">\\</span>Stage<span class=\"token punctuation\">\\</span>WriteStageInterface</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WriteStage</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WriteStageInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$writeStage</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>WriteStageInterface <span class=\"token variable\">$writeStage</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">writeStage</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$writeStage</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * {@inheritdoc}\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// You can add pre-write code here.</span>\n\n        <span class=\"token comment\">// Call the decorated write stage (this syntax calls the __invoke method).</span>\n        <span class=\"token variable\">$writtenObject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">writeStage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$operationName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// You can add post-write code here.</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$writtenObject</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Decorate the API Platform stage service:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/services.yaml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token key atrule\">'App\\Stage\\WriteStage'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">decorates</span><span class=\"token punctuation\">:</span> api_platform.graphql.resolver.stage.write</code></pre></div>\n<h3 id=\"disabling-resolver-stages\" style=\"position:relative;\"><a href=\"#disabling-resolver-stages\" aria-label=\"disabling resolver stages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disabling Resolver Stages</h3>\n<p>If you need to, you can disable some stages done by the resolvers, for instance if you don't want your data to be validated.</p>\n<p>The following table lists the stages you can disable in your resource configuration.</p>\n<table>\n<thead>\n<tr>\n<th>Attribute</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">read</code></td>\n<td><code class=\"language-text\">bool</code></td>\n<td><code class=\"language-text\">true</code></td>\n<td>Enables or disables the reading of data</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">deserialize</code></td>\n<td><code class=\"language-text\">bool</code></td>\n<td><code class=\"language-text\">true</code></td>\n<td>Enables or disables the deserialization of data (mutation only)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">validate</code></td>\n<td><code class=\"language-text\">bool</code></td>\n<td><code class=\"language-text\">true</code></td>\n<td>Enables or disables the validation of the denormalized data (mutation only)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">write</code></td>\n<td><code class=\"language-text\">bool</code></td>\n<td><code class=\"language-text\">true</code></td>\n<td>Enables or disables the writing of data into the persistence system (mutation only)</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">serialize</code></td>\n<td><code class=\"language-text\">bool</code></td>\n<td><code class=\"language-text\">true</code></td>\n<td>Enables or disables the serialization of data</td>\n</tr>\n</tbody>\n</table>\n<p>A stage can be disabled at the operation level:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(graphql={\n *     \"mutation\"={\n *         \"write\"=false\n *     }\n * })\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Or at the resource attributes level (will be also applied in REST and for all operations):</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n *     graphql={...},\n *     attributes={\n *         \"write\"=false\n *     }\n * })\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h2 id=\"events\" style=\"position:relative;\"><a href=\"#events\" aria-label=\"events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Events</h2>\n<p>No events are sent by the resolvers in API Platform. If you want to add your custom logic, <a href=\"#workflow-of-the-resolvers\">decorating the stages</a> is\nthe recommended way to do it.</p>\n<p>However, if you really want to use events, you can by installing a <a href=\"https://github.com/alanpoulain/ApiPlatformEventsBundle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bundle dispatching events before and after the stages</a>.</p>\n<h2 id=\"filters\" style=\"position:relative;\"><a href=\"#filters\" aria-label=\"filters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filters</h2>\n<p>Filters are supported out-of-the-box. Follow the <a href=\"/docs/master/core/filters/\">filters</a> documentation and your filters will be available as arguments of queries.</p>\n<p>However you don't necessarily have the same needs for your GraphQL endpoint as for your REST one.</p>\n<p>In the <code class=\"language-text\">ApiResource</code> declaration, you can choose to decorrelate the GraphQL filters in <code class=\"language-text\">collection_query</code> of the <code class=\"language-text\">graphql</code> attribute.\nIn order to keep the default behavior (possibility to fetch, delete, update or create), define all the operations (<code class=\"language-text\">item_query</code> ,<code class=\"language-text\">collection_query</code> , <code class=\"language-text\">delete</code>, <code class=\"language-text\">update</code> and <code class=\"language-text\">create</code>).</p>\n<p>For example, this entity will have a search filter for REST and a date filter for GraphQL:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n *     attributes={\n *         \"filters\"={\"offer.search_filter\"}\n *     },\n *     graphql={\n *         \"item_query\",\n *         \"collection_query\"={\n *              \"filters\"={\"offer.date_filter\"}\n *          },\n *          \"delete\",\n *          \"update\",\n *          \"create\"\n *     }\n * )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h3 id=\"filtering-on-nested-properties\" style=\"position:relative;\"><a href=\"#filtering-on-nested-properties\" aria-label=\"filtering on nested properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filtering on Nested Properties</h3>\n<p>Unlike for REST, all built-in filters support nested properties using the underscore (<code class=\"language-text\">_</code>) syntax instead of the dot (<code class=\"language-text\">.</code>) syntax, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Bridge<span class=\"token punctuation\">\\</span>Doctrine<span class=\"token punctuation\">\\</span>Orm<span class=\"token punctuation\">\\</span>Filter<span class=\"token punctuation\">\\</span>OrderFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Bridge<span class=\"token punctuation\">\\</span>Doctrine<span class=\"token punctuation\">\\</span>Orm<span class=\"token punctuation\">\\</span>Filter<span class=\"token punctuation\">\\</span>SearchFilter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource\n * @ApiFilter(OrderFilter::class, properties={\"product.releaseDate\"})\n * @ApiFilter(SearchFilter::class, properties={\"product.color\": \"exact\"})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>The above allows you to find offers by their respective product's color like for the REST Api.\nYou can then filter using the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  offers<span class=\"token punctuation\">(</span><span class=\"token attr-name\">product_color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        product <span class=\"token punctuation\">{</span>\n          name\n          color\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or order your results like:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  offers<span class=\"token punctuation\">(</span><span class=\"token attr-name\">order</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">product_releaseDate</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"DESC\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        product <span class=\"token punctuation\">{</span>\n          name\n          color\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another difference with the REST API filters is that the keyword <code class=\"language-text\">_list</code> must be used instead of the traditional <code class=\"language-text\">[]</code> to filter over multiple values.</p>\n<p>For example, if you want to search the offers with a green or a red product you can use the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  offers<span class=\"token punctuation\">(</span><span class=\"token attr-name\">product_color_list</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        product <span class=\"token punctuation\">{</span>\n          name\n          color\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"pagination\" style=\"position:relative;\"><a href=\"#pagination\" aria-label=\"pagination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pagination</h2>\n<p>API Platform natively enables a cursor-based pagination for collections.\nIt supports <a href=\"https://graphql.org/learn/pagination/#complete-connection-model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL's Complete Connection Model</a> and is compatible with <a href=\"https://relay.dev/graphql/connections.htm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL Cursor Connections Specification</a>.</p>\n<p>A page-based pagination can also be enabled per resource or per operation.</p>\n<h3 id=\"using-the-cursor-based-pagination\" style=\"position:relative;\"><a href=\"#using-the-cursor-based-pagination\" aria-label=\"using the cursor based pagination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the Cursor-based Pagination</h3>\n<p>Here is an example query leveraging the pagination system:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  offers<span class=\"token punctuation\">(</span><span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">after</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"cursor\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    totalCount\n    pageInfo <span class=\"token punctuation\">{</span>\n      endCursor\n      hasNextPage\n    <span class=\"token punctuation\">}</span>\n    edges <span class=\"token punctuation\">{</span>\n      cursor\n      node <span class=\"token punctuation\">{</span>\n        id\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Two pairs of parameters work with the query:</p>\n<ul>\n<li><code class=\"language-text\">first</code> and <code class=\"language-text\">after</code>;</li>\n<li><code class=\"language-text\">last</code> and <code class=\"language-text\">before</code>.</li>\n</ul>\n<p>More precisely:</p>\n<ul>\n<li><code class=\"language-text\">first</code> corresponds to the items per page starting from the beginning;</li>\n<li><code class=\"language-text\">after</code> corresponds to the <code class=\"language-text\">cursor</code> from which the items are returned.</li>\n<li><code class=\"language-text\">last</code> corresponds to the items per page starting from the end;</li>\n<li><code class=\"language-text\">before</code> corresponds to the <code class=\"language-text\">cursor</code> from which the items are returned, from a backwards point of view.</li>\n</ul>\n<p>The current page always has a <code class=\"language-text\">startCursor</code> and an <code class=\"language-text\">endCursor</code>, present in the <code class=\"language-text\">pageInfo</code> field.</p>\n<p>To get the next page, you would add the <code class=\"language-text\">endCursor</code> from the current page as the <code class=\"language-text\">after</code> parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  offers<span class=\"token punctuation\">(</span><span class=\"token attr-name\">first</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">after</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"endCursor\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For the previous page, you would add the <code class=\"language-text\">startCursor</code> from the current page as the <code class=\"language-text\">before</code> parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  offers<span class=\"token punctuation\">(</span><span class=\"token attr-name\">last</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">before</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"startCursor\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>How do you know when you have reached the last page? It is the aim of the property <code class=\"language-text\">hasNextPage</code> or <code class=\"language-text\">hasPreviousPage</code> in <code class=\"language-text\">pageInfo</code>.\nWhen it is false, you know it is the last page and moving forward or backward will give you an empty result.</p>\n<h3 id=\"using-the-page-based-pagination\" style=\"position:relative;\"><a href=\"#using-the-page-based-pagination\" aria-label=\"using the page based pagination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the Page-based Pagination</h3>\n<p>In order to use the page-based pagination, you need to enable it in the resource.</p>\n<p>For instance at the operation level:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n *     graphql={\n *          \"item_query\",\n *          \"collection_query\"={\n *              \"paginationType\"=\"page\"\n *          },\n *          \"delete\",\n *          \"update\",\n *          \"create\"\n *     }\n * )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Or if you want to do it at the resource level:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n *     attributes={\n *          \"paginationType\"=\"page\"\n *     }\n * )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Once enabled, a <code class=\"language-text\">page</code> filter will be available in the collection query (its name <a href=\"/docs/master/core/pagination/\">can be changed in the configuration</a>) and an <code class=\"language-text\">itemsPerPage</code> filter will be available too if <a href=\"/docs/master/core/pagination/#client-side\">client-side-pagination</a> is enabled.</p>\n<p>A <code class=\"language-text\">paginationInfo</code> field can be queried to obtain the following information:</p>\n<ul>\n<li><code class=\"language-text\">itemsPerPage</code>: the number of items per page. To change it, follow the <a href=\"/docs/master/core/pagination/#changing-the-number-of-items-per-page\">pagination documentation</a>.</li>\n<li><code class=\"language-text\">lastPage</code>: the last page of the collection.</li>\n<li><code class=\"language-text\">totalCount</code>: the total number of items in the collection.</li>\n</ul>\n<p>The collection items data are available in the <code class=\"language-text\">collection</code> field.</p>\n<p>An example of a query:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  offers<span class=\"token punctuation\">(</span><span class=\"token attr-name\">page</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">itemsPerPage</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    collection <span class=\"token punctuation\">{</span>\n      id\n    <span class=\"token punctuation\">}</span>\n    paginationInfo <span class=\"token punctuation\">{</span>\n      itemsPerPage\n      lastPage\n      totalCount\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"disabling-the-pagination\" style=\"position:relative;\"><a href=\"#disabling-the-pagination\" aria-label=\"disabling the pagination permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disabling the Pagination</h3>\n<p>See also the <a href=\"/docs/master/core/pagination/#disabling-the-pagination\">pagination documentation</a>.</p>\n<h4 id=\"globally\" style=\"position:relative;\"><a href=\"#globally\" aria-label=\"globally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Globally</h4>\n<p>The pagination can be disabled for all GraphQL resources using this configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">graphql</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">collection</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">pagination</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></code></pre></div>\n<h4 id=\"for-a-specific-resource\" style=\"position:relative;\"><a href=\"#for-a-specific-resource\" aria-label=\"for a specific resource permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For a Specific Resource</h4>\n<p>It can also be disabled for a specific resource (REST and GraphQL):</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Book.php</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"pagination_enabled\"=false})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h4 id=\"for-a-specific-resource-collection-operation\" style=\"position:relative;\"><a href=\"#for-a-specific-resource-collection-operation\" aria-label=\"for a specific resource collection operation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For a Specific Resource Collection Operation</h4>\n<p>You can also disable the pagination for a specific collection operation:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Book.php</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(graphql={\"collection_query\"={\"pagination_enabled\"=false}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h2 id=\"security\" style=\"position:relative;\"><a href=\"#security\" aria-label=\"security permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Security</h2>\n<p>To add a security layer to your queries and mutations, follow the <a href=\"/docs/master/core/security/\">security</a> documentation.</p>\n<p>If your security needs differ between REST and GraphQL, add the particular parts in the <code class=\"language-text\">graphql</code> key.</p>\n<p>In the example below, we want the same security rules as we have in REST, but we also want to allow an admin to delete a book only in GraphQL.\nPlease note that, it's not possible to update a book in GraphQL because the <code class=\"language-text\">update</code> operation is not defined.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Book.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n *     attributes={\"security\"=\"is_granted('ROLE_USER')\"},\n *     collectionOperations={\n *         \"post\"={\"security\"=\"is_granted('ROLE_ADMIN')\", \"security_message\"=\"Only admins can add books.\"}\n *     },\n *     itemOperations={\n *         \"get\"={\"security\"=\"is_granted('ROLE_USER') and object.owner == user\", \"security_message\"=\"Sorry, but you are not the book owner.\"}\n *     },\n *     graphql={\n *         \"item_query\"={\"security\"=\"is_granted('ROLE_USER') and object.owner == user\"},\n *         \"collection_query\"={\"security\"=\"is_granted('ROLE_ADMIN')\"},\n *         \"delete\"={\"security\"=\"is_granted('ROLE_ADMIN')\"},\n *         \"create\"={\"security\"=\"is_granted('ROLE_ADMIN')\"}\n *     }\n * )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h2 id=\"serialization-groups\" style=\"position:relative;\"><a href=\"#serialization-groups\" aria-label=\"serialization groups permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serialization Groups</h2>\n<p>You may want to restrict some resource's attributes to your GraphQL clients.</p>\n<p>As described in the <a href=\"/docs/master/core/serialization/\">serialization process</a> documentation, you can use serialization groups to expose only the attributes you want in queries or in mutations.</p>\n<p>If the (de)normalization context between GraphQL and REST is different, use the <code class=\"language-text\">graphql</code> key to change it.</p>\n<p>Note that:</p>\n<ul>\n<li>A <strong>query</strong> is only using the normalization context.</li>\n<li>A <strong>mutation</strong> is using the denormalization context for its input and the normalization context for its output.</li>\n</ul>\n<p>The following example shows you what can be done:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Book.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Serializer<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>Groups</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(\n *     normalizationContext={\"groups\"={\"read\"}},\n *     denormalizationContext={\"groups\"={\"write\"}},\n *     graphql={\n *         \"item_query\"={\"normalization_context\"={\"groups\"={\"item_query\"}}},\n *         \"collection_query\"={\"normalization_context\"={\"groups\"={\"collection_query\"}}},\n *         \"create\"={\n *             \"normalization_context\"={\"groups\"={\"collection_query\"}},\n *             \"denormalization_context\"={\"groups\"={\"mutation\"}}\n *         }\n *     }\n * )\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">/**\n     * @Groups({\"read\", \"write\", \"item_query\", \"collection_query\"})\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @Groups({\"read\", \"mutation\", \"item_query\"})\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$author</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>In this case, the REST endpoint will be able to get the two attributes of the book and to modify only its name.</p>\n<p>The GraphQL endpoint will be able to query the name and author of an item.\nIt will be able to query the name of the items in the collection.\nIt will only be able to create a book with an author.\nWhen doing this mutation, the author of the created book will not be returned (the name will be instead).</p>\n<h3 id=\"different-types-when-using-different-serialization-groups\" style=\"position:relative;\"><a href=\"#different-types-when-using-different-serialization-groups\" aria-label=\"different types when using different serialization groups permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Different Types when Using Different Serialization Groups</h3>\n<p>When you use different serialization groups, it will create different types in your schema.</p>\n<p>Make sure you understand the implications when doing this: having different types means breaking the cache features in some GraphQL clients (in <a href=\"https://www.apollographql.com/docs/react/caching/cache-configuration/#automatic-cache-updates\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo Client</a> for example).</p>\n<p>For instance:</p>\n<ul>\n<li>If you use a different <code class=\"language-text\">normalization_context</code> for a mutation, a <code class=\"language-text\">MyResourcePayloadData</code> type with the restricted fields will be generated and used instead of <code class=\"language-text\">MyResource</code> (the query type).</li>\n<li>If you use a different <code class=\"language-text\">normalization_context</code> for the query of an item (<code class=\"language-text\">item_query</code> operation) and for the query of a collection (<code class=\"language-text\">collection_query</code> operation), two types <code class=\"language-text\">MyResourceItem</code> and <code class=\"language-text\">MyResourceCollection</code> with the restricted fields will be generated and used instead of <code class=\"language-text\">MyResource</code> (the query type).</li>\n</ul>\n<h2 id=\"exception-and-error-formatting\" style=\"position:relative;\"><a href=\"#exception-and-error-formatting\" aria-label=\"exception and error formatting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception and Error Formatting</h2>\n<p>By default, if an exception is sent when resolving a query or a mutation, it is normalized following the <a href=\"https://github.com/graphql/graphql-spec/blob/master/spec/Section%207%20--%20Response.md#errors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL specification</a>.</p>\n<p>It means an <code class=\"language-text\">errors</code> entry will be returned in the response, containing the following entries: <code class=\"language-text\">message</code>, <code class=\"language-text\">extensions</code>, <code class=\"language-text\">locations</code> and <code class=\"language-text\">path</code>.\nFor more information, please <a href=\"https://webonyx.github.io/graphql-php/error-handling/#default-error-formatting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">refer to the documentation in graphql-php</a>.</p>\n<p>In <code class=\"language-text\">prod</code> mode, the displayed message will be a generic one, excepted for a <code class=\"language-text\">RuntimeException</code> (and all exceptions inherited from it) for which it will be its actual message.\nThis behavior is different from what is described in the <a href=\"https://webonyx.github.io/graphql-php/error-handling\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">graphql-php documentation</a>.\nIt's because a built-in <a href=\"#custom-exception-normalizer\">custom exception normalizer</a> is used to normalize the <code class=\"language-text\">RuntimeException</code> and change the default behavior.</p>\n<p>If you are in <code class=\"language-text\">dev</code> mode, more entries will be added in the response: <code class=\"language-text\">debugMessage</code> (containing the actual exception message, for instance in the case of a <code class=\"language-text\">LogicException</code>) and <code class=\"language-text\">trace</code> (the formatted exception trace).</p>\n<p>For some specific exceptions, built-in <a href=\"#custom-exception-normalizer\">custom exception normalizers</a> are also used to add more information.\nIt's the case for a <code class=\"language-text\">HttpException</code> for which the <code class=\"language-text\">status</code> entry will be added under <code class=\"language-text\">extensions</code> and for a <code class=\"language-text\">ValidationException</code> for which <code class=\"language-text\">status</code> (always 400) and <code class=\"language-text\">violations</code> entries will be added.</p>\n<h3 id=\"custom-exception-normalizer\" style=\"position:relative;\"><a href=\"#custom-exception-normalizer\" aria-label=\"custom exception normalizer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Exception Normalizer</h3>\n<p>If you want to add more specific behaviors depending on the exception or if you want to change the behavior of the built-in ones, you can do so by creating your own normalizer.</p>\n<p>Please follow the <a href=\"https://symfony.com/doc/current/serializer/custom_normalizer.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Symfony documentation to create a custom normalizer</a>.</p>\n<p>The code should look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Serializer/Exception/MyExceptionNormalizer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Serializer<span class=\"token punctuation\">\\</span>Exception</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Exception<span class=\"token punctuation\">\\</span>MyException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">GraphQL<span class=\"token punctuation\">\\</span>Error<span class=\"token punctuation\">\\</span>Error</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">GraphQL<span class=\"token punctuation\">\\</span>Error<span class=\"token punctuation\">\\</span>FormattedError</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Serializer<span class=\"token punctuation\">\\</span>Normalizer<span class=\"token punctuation\">\\</span>NormalizerInterface</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyExceptionNormalizer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NormalizerInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * {@inheritdoc}\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$object</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$exception</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$object</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getPrevious</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$error</span> <span class=\"token operator\">=</span> FormattedError<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">createFromException</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Add your logic here and add your specific data in the $error array (in the 'extensions' entry to follow the GraphQL specification).</span>\n        <span class=\"token comment\">// $error['extensions']['yourEntry'] = ...;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$error</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * {@inheritdoc}\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">supportsNormalization</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> bool\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$data</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$data</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getPrevious</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>You can see that, in the <code class=\"language-text\">normalize</code> method, you should add a call to <code class=\"language-text\">FormattedError::createFromException</code> in order to have the same behavior as the other normalizers.</p>\n<p>When registering your custom normalizer, you can add a priority to order your normalizers between themselves.</p>\n<p>If you use a positive priority (or no priority), your normalizer will always be called before the built-in normalizers.\nFor instance, you can register a custom normalizer like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/services.yaml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">App\\Serializer\\Exception\\MyExceptionNormalizer</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'serializer.normalizer'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">priority</span><span class=\"token punctuation\">:</span> <span class=\"token number\">12 </span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"name-conversion\" style=\"position:relative;\"><a href=\"#name-conversion\" aria-label=\"name conversion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Name Conversion</h2>\n<p>You can modify how the property names of your resources are converted into field and filter names of your GraphQL schema.</p>\n<p>By default the property name will be used without conversion. If you want to apply a name converter, follow the <a href=\"/docs/master/core/serialization/#name-conversion\">Name Conversion documentation</a>.</p>\n<p>For instance, your resource can have properties in camelCase:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Book.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Bridge<span class=\"token punctuation\">\\</span>Doctrine<span class=\"token punctuation\">\\</span>Orm<span class=\"token punctuation\">\\</span>Filter<span class=\"token punctuation\">\\</span>SearchFilter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource\n * @ApiFilter(SearchFilter::class, properties={\"publicationDate\": \"partial\"})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$publicationDate</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>By default, with the search filter, the query to retrieve a collection will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  books<span class=\"token punctuation\">(</span><span class=\"token attr-name\">publicationDate</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2010\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        publicationDate\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But if you use the <code class=\"language-text\">CamelCaseToSnakeCaseNameConverter</code>, it will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  books<span class=\"token punctuation\">(</span><span class=\"token attr-name\">publication_date</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2010\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        publication_date\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"nesting-separator\" style=\"position:relative;\"><a href=\"#nesting-separator\" aria-label=\"nesting separator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nesting Separator</h3>\n<p>If you use snake_case, you can wonder how to make the difference between an underscore and the separator of the nested fields in the filter names, by default an underscore too.</p>\n<p>For instance if you have this resource:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/Book.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Bridge<span class=\"token punctuation\">\\</span>Doctrine<span class=\"token punctuation\">\\</span>Orm<span class=\"token punctuation\">\\</span>Filter<span class=\"token punctuation\">\\</span>SearchFilter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource\n * @ApiFilter(SearchFilter::class, properties={\"relatedBooks.name\": \"exact\"})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\OneToMany(targetEntity=\"Book\")\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$relatedBooks</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>You would need to use the search filter like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  books<span class=\"token punctuation\">(</span><span class=\"token attr-name\">related_books_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Fitz and the Fool\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        name\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To avoid this issue, you can configure the nesting separator to use, for example, <code class=\"language-text\">__</code> instead of <code class=\"language-text\">_</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">graphql</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">nesting_separator</span><span class=\"token punctuation\">:</span> __\n<span class=\"token comment\"># ...</span></code></pre></div>\n<p>In this case, your query will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  books<span class=\"token punctuation\">(</span><span class=\"token attr-name\">related_books__name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"The Fitz and the Fool\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        name\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Much better, isn't it?</p>\n<h2 id=\"custom-types\" style=\"position:relative;\"><a href=\"#custom-types\" aria-label=\"custom types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Types</h2>\n<p>You might need to add your own types to your GraphQL application.</p>\n<p>Create your type class by implementing the interface <code class=\"language-text\">ApiPlatform\\Core\\GraphQl\\Type\\Definition\\TypeInterface</code>.</p>\n<p>You should extend the <code class=\"language-text\">GraphQL\\Type\\Definition\\ScalarType</code> class too to take advantage of its useful methods.</p>\n<p>For instance, to create a custom <code class=\"language-text\">DateType</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Type<span class=\"token punctuation\">\\</span>Definition</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Type<span class=\"token punctuation\">\\</span>Definition<span class=\"token punctuation\">\\</span>TypeInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">GraphQL<span class=\"token punctuation\">\\</span>Error<span class=\"token punctuation\">\\</span>Error</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">GraphQL<span class=\"token punctuation\">\\</span>Language<span class=\"token punctuation\">\\</span>AST<span class=\"token punctuation\">\\</span>StringValueNode</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">GraphQL<span class=\"token punctuation\">\\</span>Type<span class=\"token punctuation\">\\</span>Definition<span class=\"token punctuation\">\\</span>ScalarType</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">GraphQL<span class=\"token punctuation\">\\</span>Utils<span class=\"token punctuation\">\\</span>Utils</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTimeType</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ScalarType</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TypeInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'DateTime'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">description</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'The `DateTime` scalar type represents time data.'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * {@inheritdoc}\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Already serialized.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\\<span class=\"token package\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>DateTime</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Y-m-d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>DateTime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Value must be an instance of DateTime to be represented by DateTime: %s'</span><span class=\"token punctuation\">,</span> Utils<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">printSafe</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>\\<span class=\"token package\">DateTime</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATOM</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * {@inheritdoc}\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parseValue</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>\\<span class=\"token package\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'DateTime cannot represent non string value: %s'</span><span class=\"token punctuation\">,</span> Utils<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">printSafeJson</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean constant\">false</span> <span class=\"token operator\">===</span> \\<span class=\"token package\">DateTime</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">createFromFormat</span><span class=\"token punctuation\">(</span>\\<span class=\"token package\">DateTime</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATOM</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'DateTime cannot represent non date value: %s'</span><span class=\"token punctuation\">,</span> Utils<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">printSafeJson</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Will be denormalized into a \\DateTime.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * {@inheritdoc}\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parseLiteral</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$valueNode</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$variables</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$valueNode</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">StringValueNode</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean constant\">false</span> <span class=\"token operator\">!==</span> \\<span class=\"token package\">DateTime</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">createFromFormat</span><span class=\"token punctuation\">(</span>\\<span class=\"token package\">DateTime</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ATOM</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$valueNode</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$valueNode</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">value</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Intentionally without message, as all information already in wrapped Exception</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>Exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>You can also check the documentation of <a href=\"https://webonyx.github.io/graphql-php/type-system/scalar-types/#writing-custom-scalar-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">graphql-php</a>.</p>\n<p>The big difference in API Platform is that the value is already serialized when it's received in your type class.\nSimilarly, you would not want to denormalize your parsed value since it will be done by API Platform later.</p>\n<p>If you use autoconfiguration (the default Symfony configuration) in your application, then you are done!</p>\n<p>Else, you need to tag your type class like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/services.yaml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token key atrule\">App\\Type\\Definition\\DateTimeType</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> api_platform.graphql.type <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Your custom type is now registered and is available in the <code class=\"language-text\">TypesContainer</code>.</p>\n<p>To use it please <a href=\"#modify-the-extracted-types\">modify the extracted types</a> or use it directly in <a href=\"#custom-queries\">custom queries</a> or <a href=\"#custom-mutations\">custom mutations</a>.</p>\n<h2 id=\"modify-the-extracted-types\" style=\"position:relative;\"><a href=\"#modify-the-extracted-types\" aria-label=\"modify the extracted types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a> Modify the Extracted Types</h2>\n<p>The GraphQL schema and its types are extracted from your resources.\nIn some cases, you would want to modify the extracted types for instance to use your custom ones.</p>\n<p>To do so, you need to decorate the <code class=\"language-text\">api_platform.graphql.type_converter</code> service:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/services.yaml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token key atrule\">'App\\Type\\TypeConverter'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">decorates</span><span class=\"token punctuation\">:</span> api_platform.graphql.type_converter</code></pre></div>\n<p>Your class needs to look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Type</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Type<span class=\"token punctuation\">\\</span>TypeConverterInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Model<span class=\"token punctuation\">\\</span>Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>PropertyInfo<span class=\"token punctuation\">\\</span>Type</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TypeConverter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TypeConverterInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$defaultTypeConverter</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>TypeConverterInterface <span class=\"token variable\">$defaultTypeConverter</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">defaultTypeConverter</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$defaultTypeConverter</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * {@inheritdoc}\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span>Type <span class=\"token variable\">$type</span><span class=\"token punctuation\">,</span> bool <span class=\"token variable\">$input</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span>string <span class=\"token variable\">$queryName</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span>string <span class=\"token variable\">$mutationName</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$rootResource</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span>string <span class=\"token variable\">$property</span><span class=\"token punctuation\">,</span> int <span class=\"token variable\">$depth</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'publicationDate'</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$property</span>\n            <span class=\"token operator\">&amp;&amp;</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$resourceClass</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'DateTime'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">defaultTypeConverter</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">convertType</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$type</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$input</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$queryName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$mutationName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$rootResource</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$property</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$depth</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>In this case, the <code class=\"language-text\">publicationDate</code> property of the <code class=\"language-text\">Book</code> class will have a custom <code class=\"language-text\">DateTime</code> type.</p>\n<p>You can even apply this logic for a kind of property. Replace the previous condition with something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Type<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">BUILTIN_TYPE_OBJECT</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$type</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getBuiltinType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_a</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$type</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \\<span class=\"token package\">DateTimeInterface</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'DateTime'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All <code class=\"language-text\">DateTimeInterface</code> properties will have the <code class=\"language-text\">DateTime</code> type in this example.</p>\n<h2 id=\"changing-the-serialization-context-dynamically\" style=\"position:relative;\"><a href=\"#changing-the-serialization-context-dynamically\" aria-label=\"changing the serialization context dynamically permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Changing the Serialization Context Dynamically</h2>\n<p><a href=\"/docs/master/core/serialization/#changing-the-serialization-context-dynamically\">As REST</a>, it's possible to add dynamically a (de)serialization group when resolving a query or a mutation.</p>\n<p>There are some differences though.</p>\n<p>The service is <code class=\"language-text\">api_platform.graphql.serializer.context_builder</code> and the method to override is <code class=\"language-text\">create</code>.</p>\n<p>The decorator could be like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Serializer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Serializer<span class=\"token punctuation\">\\</span>SerializerContextBuilderInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity<span class=\"token punctuation\">\\</span>Book</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Security<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Authorization<span class=\"token punctuation\">\\</span>AuthorizationCheckerInterface</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookContextBuilder</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SerializerContextBuilderInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$decorated</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$authorizationChecker</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>SerializerContextBuilderInterface <span class=\"token variable\">$decorated</span><span class=\"token punctuation\">,</span> AuthorizationCheckerInterface <span class=\"token variable\">$authorizationChecker</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">decorated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$decorated</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">authorizationChecker</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$authorizationChecker</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$resolverContext</span><span class=\"token punctuation\">,</span> bool <span class=\"token variable\">$normalization</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$context</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">decorated</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$operationName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$resolverContext</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$normalization</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$resourceClass</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'resource_class'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$resourceClass</span> <span class=\"token operator\">===</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$context</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'groups'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">authorizationChecker</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isGranted</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'ROLE_ADMIN'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean constant\">false</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$normalization</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$context</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'groups'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'admin:input'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h2 id=\"export-the-schema-in-sdl\" style=\"position:relative;\"><a href=\"#export-the-schema-in-sdl\" aria-label=\"export the schema in sdl permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Export the Schema in SDL</h2>\n<p>You may need to export your schema in SDL (Schema Definition Language) to import it in some tools.</p>\n<p>The <code class=\"language-text\">api:graphql:export</code> command is provided to do so:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose <span class=\"token builtin class-name\">exec</span> php bin/console api:graphql:export -o path/to/your/volume/schema.graphql</code></pre></div>\n<p>Since the command prints the schema to the output if you don't use the <code class=\"language-text\">-o</code> option, you can also use this command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker-compose <span class=\"token builtin class-name\">exec</span> php bin/console api:graphql:export <span class=\"token operator\">></span> path/in/host/schema.graphql</code></pre></div>\n<h2 id=\"handling-file-upload\" style=\"position:relative;\"><a href=\"#handling-file-upload\" aria-label=\"handling file upload permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Handling File Upload</h2>\n<p>Please follow the <a href=\"/docs/master/core/file-upload/\">file upload documentation</a>, only the differences will be documented here.</p>\n<p>The file upload with GraphQL follows the <a href=\"https://github.com/jaydenseric/graphql-multipart-request-spec\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL multipart request specification</a>.</p>\n<p>You can also upload multiple files at the same time.</p>\n<h3 id=\"configuring-the-entity-receiving-the-uploaded-file\" style=\"position:relative;\"><a href=\"#configuring-the-entity-receiving-the-uploaded-file\" aria-label=\"configuring the entity receiving the uploaded file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring the Entity Receiving the Uploaded File</h3>\n<p>Configure the entity by adding a <a href=\"#custom-mutations\">custom mutation resolver</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Entity/MediaObject.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiProperty</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Resolver<span class=\"token punctuation\">\\</span>CreateMediaObjectResolver</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Doctrine<span class=\"token punctuation\">\\</span>ORM<span class=\"token punctuation\">\\</span>Mapping</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">ORM</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpFoundation<span class=\"token punctuation\">\\</span>File<span class=\"token punctuation\">\\</span>File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Serializer<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>Groups</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Validator<span class=\"token punctuation\">\\</span>Constraints</span> <span class=\"token keyword\">as</span> Assert<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Vich<span class=\"token punctuation\">\\</span>UploaderBundle<span class=\"token punctuation\">\\</span>Mapping<span class=\"token punctuation\">\\</span>Annotation</span> <span class=\"token keyword\">as</span> Vich<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ORM\\Entity\n * @ApiResource(\n *     iri=\"http://schema.org/MediaObject\",\n *     normalizationContext={\n *         \"groups\"={\"media_object_read\"}\n *     },\n *     graphql={\n *         \"upload\"={\n *             \"mutation\"=CreateMediaObjectResolver::class,\n *             \"deserialize\"=false,\n *             \"args\"={\n *                 \"file\"={\"type\"=\"Upload!\", \"description\"=\"The file to upload\"}\n *             }\n *         }\n *     }\n * )\n * @Vich\\Uploadable\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MediaObject</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * @var int|null\n     *\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue\n     * @ORM\\Id\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @var string|null\n     *\n     * @ApiProperty(iri=\"http://schema.org/contentUrl\")\n     * @Groups({\"media_object_read\"})\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$contentUrl</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @var File|null\n     *\n     * @Assert\\NotNull(groups={\"media_object_create\"})\n     * @Vich\\UploadableField(mapping=\"media_object\", fileNameProperty=\"filePath\")\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @var string|null\n     *\n     * @ORM\\Column(nullable=true)\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$filePath</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">?</span>int\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">id</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>As you can see, a dedicated type <code class=\"language-text\">Upload</code> is used in the argument of the <code class=\"language-text\">upload</code> mutation.</p>\n<p>If you need to upload multiple files, replace <code class=\"language-text\">&quot;file&quot;={&quot;type&quot;=&quot;Upload!&quot;, &quot;description&quot;=&quot;The file to upload&quot;}</code>\nwith <code class=\"language-text\">&quot;files&quot;={&quot;type&quot;=&quot;[Upload!]!&quot;, &quot;description&quot;=&quot;Files to upload&quot;}</code>.</p>\n<p>You don't need to create it, it's provided in API Platform.</p>\n<h3 id=\"resolving-the-file-upload\" style=\"position:relative;\"><a href=\"#resolving-the-file-upload\" aria-label=\"resolving the file upload permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resolving the File Upload</h3>\n<p>The corresponding resolver you added in the resource configuration should be written like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// api/src/Resolver/CreateMediaObjectResolver.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Resolver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>GraphQl<span class=\"token punctuation\">\\</span>Resolver<span class=\"token punctuation\">\\</span>MutationResolverInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Entity<span class=\"token punctuation\">\\</span>MediaObject</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpFoundation<span class=\"token punctuation\">\\</span>File<span class=\"token punctuation\">\\</span>UploadedFile</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateMediaObjectResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MutationResolverInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * @param null $item\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> MediaObject\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$uploadedFile</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$context</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'args'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$mediaObject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MediaObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$mediaObject</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$uploadedFile</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$mediaObject</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>For handling the upload of multiple files, iterate over <code class=\"language-text\">$context[&#39;args&#39;][&#39;input&#39;][&#39;files&#39;]</code>.</p>\n<h3 id=\"using-the-createmediaobject-mutation\" style=\"position:relative;\"><a href=\"#using-the-createmediaobject-mutation\" aria-label=\"using the createmediaobject mutation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using the <code class=\"language-text\">createMediaObject</code> Mutation</h3>\n<p>Following the specification, the upload must be done with a <code class=\"language-text\">multipart/form-data</code> content type.</p>\n<p>You need to enable it in the <a href=\"/docs/master/core/content-negotiation/#configuring-formats-globally\">allowed formats of API Platform</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># api/config/packages/api_platform.yaml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">formats</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># ...</span>\n        <span class=\"token key atrule\">multipart</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'multipart/form-data'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>You can now upload files using the <code class=\"language-text\">createMediaObject</code> mutation, for details check <a href=\"https://github.com/jaydenseric/graphql-multipart-request-spec\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL multipart request specification</a>\nand for an example implementation for the Apollo client check out <a href=\"https://github.com/jaydenseric/apollo-upload-client\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Apollo Upload Client</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">mutation</span> CreateMediaObject<span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">:</span> Upload<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    createMediaObject<span class=\"token punctuation\">(</span><span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">file</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mediaObject <span class=\"token punctuation\">{</span>\n            id\n            contentUrl\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","nav":{"chapters":[{"title":"The Distribution: Create Powerful APIs with Ease","path":"distribution","items":[{"id":"index","title":"Getting Started with API Platform: Hypermedia and GraphQL API, Admin and Progressive Web App","anchors":[{"id":"installing-the-framework","title":"Installing the Framework","anchors":[{"id":"using-the-api-platform-distribution-recommended","title":"Using the API Platform Distribution (Recommended)"},{"id":"using-symfony-flex-and-composer-advanced-users","title":"Using Symfony Flex and Composer (Advanced Users)"}]},{"id":"its-ready","title":"It's Ready!"},{"id":"bringing-your-own-model","title":"Bringing your Own Model"},{"id":"validating-data","title":"Validating Data"},{"id":"adding-graphql-support","title":"Adding GraphQL Support"},{"id":"the-admin","title":"The Admin"},{"id":"a-react-progressive-web-app","title":"A React Progressive Web App"},{"id":"hooking-your-own-business-logic","title":"Hooking Your Own Business Logic"},{"id":"other-features","title":"Other Features"},{"id":"screencasts","title":"Screencasts"}]},{"id":"testing","title":"Testing the API","anchors":[{"id":"creating-data-fixtures","title":"Creating Data Fixtures"},{"id":"writing-functional-tests","title":"Writing Functional Tests"},{"id":"writing-unit-tests","title":"Writing Unit Tests"},{"id":"additional-and-alternative-testing-tools","title":"Additional and Alternative Testing Tools"}]},{"id":"debugging","title":"Debugging","anchors":[{"id":"xdebug","title":"Xdebug"},{"id":"add-a-development-stage-to-the-dockerfile","title":"Add a Development Stage to the Dockerfile"},{"id":"configure-xdebug-with-docker-compose-override","title":"Configure Xdebug with Docker Compose Override"},{"id":"troubleshooting","title":"Troubleshooting"}]}]},{"title":"The API Component","path":"core","items":[{"id":"index","title":"The API Platform Core Library","anchors":[{"id":"features","title":"Features"},{"id":"screencasts","title":"Screencasts"}]},{"id":"getting-started","title":"Getting started","anchors":[{"id":"installing-api-platform-core","title":"Installing API Platform Core"},{"id":"before-reading-this-documentation","title":"Before Reading this Documentation"},{"id":"mapping-the-entities","title":"Mapping the Entities"}]},{"id":"design","title":"General Design Considerations"},{"id":"extending","title":"Extending API Platform","anchors":[{"id":"doctrine-specific-extension-points","title":"Doctrine Specific Extension Points"},{"id":"leveraging-the-built-in-infrastructure-using-composition","title":"Leveraging the Built-in Infrastructure Using Composition"}]},{"id":"testing","title":"Testing Utilities","anchors":[{"id":"the-test-httpclient","title":"The Test HttpClient"},{"id":"api-test-assertions","title":"API Test Assertions"},{"id":"http-test-assertions","title":"HTTP Test Assertions"}]},{"id":"operations","title":"Operations","anchors":[{"id":"enabling-and-disabling-operations","title":"Enabling and Disabling Operations"},{"id":"configuring-operations","title":"Configuring Operations"},{"id":"prefixing-all-routes-of-all-operations","title":"Prefixing All Routes of All Operations"}]},{"id":"graphql","title":"GraphQL Support","anchors":[{"id":"enabling-graphql","title":"Enabling GraphQL"},{"id":"graphiql","title":"GraphiQL","anchors":[{"id":"add-another-location-for-graphiql","title":"Add another Location for GraphiQL"}]},{"id":"graphql-playground","title":"GraphQL Playground","anchors":[{"id":"add-another-location-for-graphql-playground","title":"Add another Location for GraphQL Playground"}]},{"id":"modifying-or-disabling-the-default-ide","title":"Modifying or Disabling the Default IDE"},{"id":"request-with-applicationgraphql-content-type","title":"Request with application/graphql Content-Type"},{"id":"queries","title":"Queries","anchors":[{"id":"global-object-identifier","title":"Global Object Identifier"},{"id":"custom-queries","title":"Custom Queries"}]},{"id":"mutations","title":"Mutations","anchors":[{"id":"client-mutation-id","title":"Client Mutation Id"},{"id":"custom-mutations","title":"Custom Mutations"}]},{"id":"subscriptions","title":"Subscriptions","anchors":[{"id":"enable-update-subscriptions-for-a-resource","title":"Enable Update Subscriptions for a Resource"},{"id":"subscribe","title":"Subscribe"},{"id":"receiving-an-update","title":"Receiving an Update"},{"id":"subscriptions-cache","title":"Subscriptions Cache"}]},{"id":"workflow-of-the-resolvers","title":"Workflow of the Resolvers","anchors":[{"id":"disabling-resolver-stages","title":"Disabling Resolver Stages"}]},{"id":"events","title":"Events"},{"id":"filters","title":"Filters","anchors":[{"id":"filtering-on-nested-properties","title":"Filtering on Nested Properties"}]},{"id":"pagination","title":"Pagination","anchors":[{"id":"using-the-cursor-based-pagination","title":"Using the Cursor-based Pagination"},{"id":"using-the-page-based-pagination","title":"Using the Page-based Pagination"},{"id":"disabling-the-pagination","title":"Disabling the Pagination","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"for-a-specific-resource-collection-operation","title":"For a Specific Resource Collection Operation"}]}]},{"id":"security","title":"Security"},{"id":"serialization-groups","title":"Serialization Groups","anchors":[{"id":"different-types-when-using-different-serialization-groups","title":"Different Types when Using Different Serialization Groups"}]},{"id":"exception-and-error-formatting","title":"Exception and Error Formatting","anchors":[{"id":"custom-exception-normalizer","title":"Custom Exception Normalizer"}]},{"id":"name-conversion","title":"Name Conversion","anchors":[{"id":"nesting-separator","title":"Nesting Separator"}]},{"id":"custom-types","title":"Custom Types"},{"id":"modify-the-extracted-types","title":"Modify the Extracted Types"},{"id":"changing-the-serialization-context-dynamically","title":"Changing the Serialization Context Dynamically"},{"id":"export-the-schema-in-sdl","title":"Export the Schema in SDL"},{"id":"handling-file-upload","title":"Handling File Upload","anchors":[{"id":"configuring-the-entity-receiving-the-uploaded-file","title":"Configuring the Entity Receiving the Uploaded File"},{"id":"resolving-the-file-upload","title":"Resolving the File Upload"},{"id":"using-the-createmediaobject-mutation","title":"Using the createMediaObject Mutation"}]}]},{"id":"data-providers","title":"Data Providers","anchors":[{"id":"custom-collection-data-provider","title":"Custom Collection Data Provider"},{"id":"custom-item-data-provider","title":"Custom Item Data Provider"},{"id":"injecting-the-serializer-in-an-itemdataprovider","title":"Injecting the Serializer in an ItemDataProvider"},{"id":"injecting-extensions-pagination-filter-eagerloading-etc","title":"Injecting Extensions (Pagination, Filter, EagerLoading etc.)"},{"id":"community-data-providers","title":"Community Data Providers"}]},{"id":"data-persisters","title":"Data Persisters","anchors":[{"id":"creating-a-custom-data-persister","title":"Creating a Custom Data Persister"}]},{"id":"filters","title":"Filters","anchors":[{"id":"doctrine-orm-and-mongodb-odm-filters","title":"Doctrine ORM and MongoDB ODM Filters","anchors":[{"id":"basic-knowledge","title":"Basic Knowledge"},{"id":"search-filter","title":"Search Filter"},{"id":"date-filter","title":"Date Filter","anchors":[{"id":"managing-null-values","title":"Managing null Values"}]},{"id":"boolean-filter","title":"Boolean Filter"},{"id":"numeric-filter","title":"Numeric Filter"},{"id":"range-filter","title":"Range Filter"},{"id":"exists-filter","title":"Exists Filter","anchors":[{"id":"using-a-custom-exists-query-parameter-name","title":"Using a Custom Exists Query Parameter Name"}]},{"id":"order-filter-sorting","title":"Order Filter (Sorting)","anchors":[{"id":"comparing-with-null-values","title":"Comparing with Null Values"},{"id":"using-a-custom-order-query-parameter-name","title":"Using a Custom Order Query Parameter Name"}]},{"id":"filtering-on-nested-properties","title":"Filtering on Nested Properties"},{"id":"enabling-a-filter-for-all-properties-of-a-resource","title":"Enabling a Filter for All Properties of a Resource"}]},{"id":"elasticsearch-filters","title":"Elasticsearch Filters","anchors":[{"id":"ordering-filter-sorting","title":"Ordering Filter (Sorting)","anchors":[{"id":"using-a-custom-order-query-parameter-name","title":"Using a Custom Order Query Parameter Name"}]},{"id":"match-filter","title":"Match Filter"},{"id":"term-filter","title":"Term Filter"},{"id":"filtering-on-nested-properties","title":"Filtering on Nested Properties"}]},{"id":"serializer-filters","title":"Serializer Filters","anchors":[{"id":"group-filter","title":"Group Filter"},{"id":"property-filter","title":"Property filter"}]},{"id":"creating-custom-filters","title":"Creating Custom Filters","anchors":[{"id":"creating-custom-doctrine-orm-filters","title":"Creating Custom Doctrine ORM Filters"},{"id":"creating-custom-doctrine-mongodb-odm-filters","title":"Creating Custom Doctrine MongoDB ODM Filters"},{"id":"creating-custom-elasticsearch-filters","title":"Creating Custom Elasticsearch Filters"},{"id":"using-doctrine-orm-filters","title":"Using Doctrine ORM Filters"}]},{"id":"apifilter-annotation","title":"ApiFilter Annotation"}]},{"id":"subresources","title":"Subresources","anchors":[{"id":"using-serialization-groups","title":"Using Serialization Groups"},{"id":"using-custom-paths","title":"Using Custom Paths","anchors":[{"id":"access-control-of-subresources","title":"Access Control of Subresources"},{"id":"limiting-depth","title":"Limiting Depth"}]}]},{"id":"serialization","title":"The Serialization Process","anchors":[{"id":"overall-process","title":"Overall Process"},{"id":"available-serializers","title":"Available Serializers"},{"id":"the-serialization-context-groups-and-relations","title":"The Serialization Context, Groups and Relations","anchors":[{"id":"configuration","title":"Configuration"}]},{"id":"using-serialization-groups","title":"Using Serialization Groups"},{"id":"using-serialization-groups-per-operation","title":"Using Serialization Groups per Operation","anchors":[{"id":"embedding-relations","title":"Embedding Relations"},{"id":"denormalization","title":"Denormalization"}]},{"id":"changing-the-serialization-context-dynamically","title":"Changing the Serialization Context Dynamically"},{"id":"changing-the-serialization-context-on-a-per-item-basis","title":"Changing the Serialization Context on a Per-item Basis"},{"id":"name-conversion","title":"Name Conversion"},{"id":"decorating-a-serializer-and-adding-extra-data","title":"Decorating a Serializer and Adding Extra Data"},{"id":"entity-identifier-case","title":"Entity Identifier Case"},{"id":"embedding-the-json-ld-context","title":"Embedding the JSON-LD Context"},{"id":"collection-relation","title":"Collection Relation"}]},{"id":"validation","title":"Validation","anchors":[{"id":"validating-submitted-data","title":"Validating Submitted Data"},{"id":"using-validation-groups","title":"Using Validation Groups"},{"id":"using-validation-groups-on-operations","title":"Using Validation Groups on Operations"},{"id":"dynamic-validation-groups","title":"Dynamic Validation Groups"},{"id":"error-levels-and-payload-serialization","title":"Error Levels and Payload Serialization"},{"id":"validation-on-collection-relations","title":"Validation on Collection Relations"},{"id":"open-vocabulary-generated-from-validation-metadata","title":"Open Vocabulary Generated from Validation Metadata"},{"id":"specification-property-restrictions","title":"Specification property restrictions"}]},{"id":"security","title":"Security","anchors":[{"id":"executing-access-control-rules-after-denormalization","title":"Executing Access Control Rules After Denormalization"},{"id":"hooking-custom-permission-checks-using-voters","title":"Hooking Custom Permission Checks Using Voters"},{"id":"configuring-the-access-control-error-message","title":"Configuring the Access Control Error Message"},{"id":"filtering-collection-according-to-the-current-user-permissions","title":"Filtering Collection According to the Current User Permissions"},{"id":"disabling-operations","title":"Disabling Operations"},{"id":"changing-serialization-groups-depending-of-the-current-user","title":"Changing Serialization Groups Depending of the Current User"}]},{"id":"content-negotiation","title":"Content Negotiation","anchors":[{"id":"configuring-formats-globally","title":"Configuring Formats Globally"},{"id":"configuring-patch-formats","title":"Configuring PATCH Formats"},{"id":"configuring-error-formats","title":"Configuring Error Formats"},{"id":"configuring-formats-for-a-specific-resource-or-operation","title":"Configuring Formats For a Specific Resource or Operation"},{"id":"supporting-custom-formats","title":"Supporting Custom Formats","anchors":[{"id":"reusing-the-api-platform-infrastructure","title":"Reusing the API Platform Infrastructure"},{"id":"contributing-support-for-new-formats","title":"Contributing Support for New Formats"}]}]},{"id":"pagination","title":"Pagination","anchors":[{"id":"disabling-the-pagination","title":"Disabling the Pagination","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a specific resource"}]}]},{"id":"changing-the-number-of-items-per-page","title":"Changing the Number of Items per Page","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"}]}]},{"id":"changing-maximum-items-per-page","title":"Changing Maximum items per page","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"for-a-specific-resource-collection-operation","title":"For a Specific Resource Collection Operation"}]},{"id":"partial-pagination","title":"Partial Pagination","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"}]}]},{"id":"cursor-based-pagination","title":"Cursor based pagination"},{"id":"controlling-the-behavior-of-the-doctrine-orm-paginator","title":"Controlling the behavior of the Doctrine ORM Paginator"},{"id":"custom-controller-action","title":"Custom Controller Action"}]},{"id":"deprecations","title":"Deprecating Resources and Properties (Alternative to Versioning)","anchors":[{"id":"deprecating-resource-classes-operations-and-properties","title":"Deprecating Resource Classes, Operations and Properties"},{"id":"setting-the-sunset-http-header-to-indicate-when-a-resource-or-an-operation-will-be-removed","title":"Setting the Sunset HTTP Header to Indicate When a Resource or an Operation Will Be Removed"}]},{"id":"default-order","title":"Overriding Default Order"},{"id":"performance","title":"Performance and Cache","anchors":[{"id":"enabling-the-built-in-http-cache-invalidation-system","title":"Enabling the Built-in HTTP Cache Invalidation System","anchors":[{"id":"extending-cache-tags-for-invalidation","title":"Extending Cache-Tags for Invalidation"}]},{"id":"setting-custom-http-cache-headers","title":"Setting Custom HTTP Cache Headers"},{"id":"enabling-the-metadata-cache","title":"Enabling the Metadata Cache"},{"id":"using-ppm-php-pm","title":"Using PPM (PHP-PM)"},{"id":"doctrine-queries-and-indexes","title":"Doctrine Queries and Indexes","anchors":[{"id":"search-filter","title":"Search Filter"},{"id":"eager-loading","title":"Eager Loading","anchors":[{"id":"max-joins","title":"Max Joins"},{"id":"fetch-partial","title":"Fetch Partial"},{"id":"force-eager","title":"Force Eager"},{"id":"override-at-resource-and-operation-level","title":"Override at Resource and Operation Level"},{"id":"disable-eager-loading","title":"Disable Eager Loading"}]},{"id":"partial-pagination","title":"Partial Pagination"}]},{"id":"profiling-with-blackfireio","title":"Profiling with Blackfire.io"}]},{"id":"extensions","title":"Extensions","anchors":[{"id":"custom-doctrine-orm-extension","title":"Custom Doctrine ORM Extension","anchors":[{"id":"example","title":"Example","anchors":[{"id":"blocking-anonymous-users","title":"Blocking Anonymous Users"}]}]},{"id":"custom-doctrine-mongodb-odm-extension","title":"Custom Doctrine MongoDB ODM Extension"},{"id":"custom-elasticsearch-extension","title":"Custom Elasticsearch Extension"}]},{"id":"messenger","title":"Symfony Messenger Integration: CQRS and Async Message Processing","anchors":[{"id":"installing-symfony-messenger","title":"Installing Symfony Messenger"},{"id":"dispatching-a-resource-through-the-message-bus","title":"Dispatching a Resource through the Message Bus"},{"id":"registering-a-message-handler","title":"Registering a Message Handler"},{"id":"accessing-the-data-returned-by-the-handler","title":"Accessing the Data Returned by the Handler"},{"id":"detecting-removals","title":"Detecting Removals"},{"id":"using-messenger-with-an-input-object","title":"Using Messenger with an Input Object"}]},{"id":"dto","title":"Using Data Transfer Objects (DTOs)","anchors":[{"id":"specifying-an-input-or-an-output-data-representation","title":"Specifying an Input or an Output Data Representation"},{"id":"updating-a-resource-with-a-custom-input","title":"Updating a Resource with a Custom Input"},{"id":"disabling-the-input-or-the-output","title":"Disabling the Input or the Output"},{"id":"inputoutput-metadata","title":"Input/Output Metadata"},{"id":"using-objects-as-relations-inside-resources","title":"Using Objects As Relations Inside Resources"},{"id":"validating-data-transfer-objects","title":"Validating Data Transfer Objects"}]},{"id":"swagger","title":"OpenAPI Specification Support (formerly Swagger)","anchors":[{"id":"using-the-openapi-command","title":"Using the OpenAPI Command"},{"id":"overriding-the-openapi-specification","title":"Overriding the OpenAPI Specification"},{"id":"using-the-openapi-and-swagger-contexts","title":"Using the OpenAPI and Swagger Contexts"},{"id":"changing-the-name-of-a-definition","title":"Changing the Name of a Definition"},{"id":"changing-operations-in-the-openapi-documentation","title":"Changing Operations in the OpenAPI Documentation"},{"id":"changing-the-location-of-swagger-ui","title":"Changing the Location of Swagger UI","anchors":[{"id":"disabling-swagger-ui-or-redoc","title":"Disabling Swagger UI or ReDoc"},{"id":"manually-registering-the-swagger-ui-controller","title":"Manually Registering the Swagger UI Controller"}]},{"id":"overriding-the-ui-template","title":"Overriding the UI Template"},{"id":"compatibility-layer-with-amazon-api-gateway","title":"Compatibility Layer with Amazon API Gateway"}]},{"id":"json-schema","title":"JSON Schema Support","anchors":[{"id":"generating-a-json-schema","title":"Generating a JSON Schema"},{"id":"generating-a-json-schema-programmatically","title":"Generating a JSON Schema Programmatically"},{"id":"testing","title":"Testing"}]},{"id":"mercure","title":"Pushing Live Updates Using the Mercure Protocol","anchors":[{"id":"installing-mercure-support","title":"Installing Mercure Support"},{"id":"pushing-the-api-updates","title":"Pushing the API Updates"},{"id":"dispatching-private-updates-authorized-mode","title":"Dispatching Private Updates (Authorized Mode)"}]},{"id":"push-relations","title":"Pushing Related Resources Using HTTP/2"},{"id":"errors","title":"Errors Handling","anchors":[{"id":"converting-php-exceptions-to-http-errors","title":"Converting PHP Exceptions to HTTP Errors"}]},{"id":"external-vocabularies","title":"Using External Vocabularies"},{"id":"operation-path-naming","title":"Operation Path Naming","anchors":[{"id":"configuration","title":"Configuration"},{"id":"create-a-custom-operation-path-resolver","title":"Create a Custom Operation Path Resolver","anchors":[{"id":"defining-the-operation-segment-name-generator","title":"Defining the Operation Segment Name Generator"},{"id":"registering-the-service","title":"Registering the Service"},{"id":"configuring-it","title":"Configuring It"}]}]},{"id":"extending-jsonld-context","title":"Extending JSON-LD AND Hydra Contexts","anchors":[{"id":"json-ld","title":"JSON-LD"},{"id":"hydra","title":"Hydra"}]},{"id":"identifiers","title":"Identifiers","anchors":[{"id":"custom-identifier-normalizer","title":"Custom Identifier Normalizer"},{"id":"supported-identifiers","title":"Supported Identifiers"}]},{"id":"mongodb","title":"MongoDB Support","anchors":[{"id":"overview","title":"Overview"},{"id":"enabling-mongodb-support","title":"Enabling MongoDB Support"},{"id":"creating-documents","title":"Creating Documents"},{"id":"filtering","title":"Filtering"},{"id":"creating-custom-extensions","title":"Creating Custom Extensions"},{"id":"adding-execute-options","title":"Adding Execute Options"}]},{"id":"elasticsearch","title":"Elasticsearch Support","anchors":[{"id":"overview","title":"Overview"},{"id":"enabling-reading-support","title":"Enabling Reading Support"},{"id":"creating-models","title":"Creating Models","anchors":[{"id":"creating-custom-mapping","title":"Creating custom mapping"}]},{"id":"filtering","title":"Filtering"},{"id":"creating-custom-extensions","title":"Creating Custom Extensions"}]},{"id":"controllers","title":"Creating Custom Operations and Controllers","anchors":[{"id":"using-serialization-groups","title":"Using Serialization Groups"},{"id":"retrieving-the-entity","title":"Retrieving the Entity"},{"id":"alternative-method","title":"Alternative Method"}]},{"id":"events","title":"The Event System","anchors":[{"id":"built-in-event-listeners","title":"Built-in Event Listeners"},{"id":"custom-event-listeners","title":"Custom Event Listeners"}]},{"id":"file-upload","title":"Handling File Upload","anchors":[{"id":"installing-vichuploaderbundle","title":"Installing VichUploaderBundle"},{"id":"configuring-the-entity-receiving-the-uploaded-file","title":"Configuring the Entity Receiving the Uploaded File"},{"id":"handling-file-upload","title":"Handling File Upload"},{"id":"resolving-the-file-url","title":"Resolving the File URL"},{"id":"making-a-request-to-the-media_objects-endpoint","title":"Making a Request to the /media_objects Endpoint"},{"id":"linking-a-mediaobject-resource-to-another-resource","title":"Linking a MediaObject Resource to Another Resource"}]},{"id":"jwt","title":"JWT Authentication","anchors":[{"id":"installing-lexikjwtauthenticationbundle","title":"Installing LexikJWTAuthenticationBundle"},{"id":"configuring-the-symfony-securitybundle","title":"Configuring the Symfony SecurityBundle","anchors":[{"id":"adding-authentication-to-an-api-which-uses-a-path-prefix","title":"Adding Authentication to an API Which Uses a Path Prefix"}]},{"id":"documenting-the-authentication-mechanism-with-swaggeropen-api","title":"Documenting the Authentication Mechanism with Swagger/Open API","anchors":[{"id":"configuring-api-platform","title":"Configuring API Platform"},{"id":"adding-a-new-api-key","title":"Adding a New API Key"}]},{"id":"testing-with-behat","title":"Testing with Behat"}]},{"id":"form-data","title":"Accept application/x-www-form-urlencoded Form Data","anchors":[{"id":"create-your-deserializelistener-decorator","title":"Create your DeserializeListener Decorator"},{"id":"creating-the-service-definition","title":"Creating the Service Definition"}]},{"id":"angularjs-integration","title":"AngularJS Integration","anchors":[{"id":"restangular","title":"Restangular"},{"id":"ng-admin","title":"ng-admin"}]},{"id":"fosuser-bundle","title":"FOSUserBundle Integration","anchors":[{"id":"installing-the-bundle","title":"Installing the Bundle"},{"id":"enabling-the-bridge","title":"Enabling the Bridge"},{"id":"creating-a-user-entity-with-serialization-groups","title":"Creating a User Entity with Serialization Groups"}]},{"id":"nelmio-api-doc","title":"NelmioApiDocBundle Integration"},{"id":"configuration","title":"Configuration"}]},{"title":"The Schema Generator Component","path":"schema-generator","items":[{"id":"index","title":"The Schema Generator","anchors":[{"id":"what-is-schemaorg","title":"What Is Schema.org?"},{"id":"why-use-schemaorg-data-to-generate-a-php-model","title":"Why Use Schema.org Data to Generate a PHP Model?","anchors":[{"id":"dont-reinvent-the-wheel","title":"Don't Reinvent the Wheel"},{"id":"improve-seo-and-user-experience","title":"Improve SEO and User Experience"},{"id":"be-ready-for-the-future","title":"Be Ready for The Future"}]},{"id":"documentation","title":"Documentation"}]},{"id":"getting-started","title":"Getting Started","anchors":[{"id":"installation","title":"Installation"},{"id":"model-scaffolding","title":"Model Scaffolding","anchors":[{"id":"going-further","title":"Going Further"}]},{"id":"cardinality-extraction","title":"Cardinality Extraction"}]},{"id":"configuration","title":"Configuration","anchors":[{"id":"customizing-php-namespaces","title":"Customizing PHP Namespaces"},{"id":"forcing-a-field-range","title":"Forcing a Field Range"},{"id":"forcing-a-field-cardinality","title":"Forcing a Field Cardinality"},{"id":"forcing-a-relation-table-name","title":"Forcing a Relation Table Name"},{"id":"forcing-or-disabling-a-class-parent","title":"Forcing (or Disabling) a Class Parent"},{"id":"forcing-a-class-to-be-abstract","title":"Forcing a Class to be Abstract"},{"id":"forcing-a-nullable-property","title":"Forcing a Nullable Property"},{"id":"forcing-a-unique-property","title":"Forcing a Unique Property"},{"id":"making-a-property-read-only","title":"Making a Property Read-Only"},{"id":"making-a-property-write-only","title":"Making a Property Write-Only"},{"id":"forcing-a-property-to-be-in-a-serialization-group","title":"Forcing a Property to be in a Serialization Group"},{"id":"forcing-an-embeddable-class-to-be-embedded","title":"Forcing an Embeddable Class to be Embedded"},{"id":"author-phpdoc","title":"Author PHPDoc"},{"id":"disabling-generators-and-creating-custom-ones","title":"Disabling Generators and Creating Custom Ones"},{"id":"skipping-accessor-method-generation","title":"Skipping Accessor Method Generation"},{"id":"disabling-the-id-generator","title":"Disabling the id Generator"},{"id":"generating-uuids","title":"Generating UUIDs"},{"id":"user-submitted-uuids","title":"User submitted UUIDs"},{"id":"generating-custom-ids","title":"Generating Custom IDs"},{"id":"disabling-usage-of-doctrine-collections","title":"Disabling Usage of Doctrine Collections"},{"id":"changing-the-field-visibility","title":"Changing the Field Visibility"},{"id":"generating-asserttype-annotations","title":"Generating @Assert\\Type Annotations"},{"id":"forcing-doctrine-inheritance-mapping-annotation","title":"Forcing Doctrine Inheritance Mapping Annotation"},{"id":"interfaces-and-doctrine-resolve-target-entity-listener","title":"Interfaces and Doctrine Resolve Target Entity Listener"},{"id":"custom-schemas","title":"Custom Schemas"},{"id":"checking-goodrelation-compatibility","title":"Checking GoodRelation Compatibility"},{"id":"php-file-header","title":"PHP File Header"},{"id":"full-configuration-reference","title":"Full Configuration Reference"}]}]},{"title":"The Admin Component","path":"admin","items":[{"id":"index","title":"The API Platform Admin","anchors":[{"id":"features","title":"Features"}]},{"id":"getting-started","title":"Getting Started","anchors":[{"id":"installation","title":"Installation"},{"id":"creating-the-admin","title":"Creating the Admin"}]},{"id":"customizing","title":"Customizing the Admin","anchors":[{"id":"customizing-the-admins-main-page-and-the-resource-list","title":"Customizing the Admin's Main Page and the Resource List"},{"id":"customizing-the-list-view","title":"Customizing the List View"},{"id":"customizing-the-show-view","title":"Customizing the Show View"},{"id":"customizing-the-create-form","title":"Customizing the Create Form"},{"id":"customizing-the-edit-form","title":"Customizing the Edit Form"},{"id":"going-further","title":"Going Further"}]},{"id":"handling-relations-to-collections","title":"Handling Relations to Collections","anchors":[{"id":"using-an-autocomplete-input-for-relations","title":"Using an Autocomplete Input for Relations"}]},{"id":"schema.org","title":"Using the Schema.org Vocabulary","anchors":[{"id":"displaying-related-resources-name-instead-of-its-iri","title":"Displaying Related Resource's Name Instead of its IRI"},{"id":"emails-urls-and-identifiers","title":"Emails, URLs and Identifiers"}]},{"id":"authentication-support","title":"Authentication Support"}]},{"title":"The Client Generator Component","path":"client-generator","items":[{"id":"index","title":"The API Platform Client Generator","anchors":[{"id":"features","title":"Features"}]},{"id":"react","title":"React Generator","anchors":[{"id":"install","title":"Install"},{"id":"generating-a-progressive-web-app","title":"Generating a Progressive Web App"},{"id":"screenshots","title":"Screenshots"}]},{"id":"nextjs","title":"Next.js Generator","anchors":[{"id":"install","title":"Install","anchors":[{"id":"next--express-server","title":"Next + Express Server"},{"id":"installing-the-generator-dependencies","title":"Installing the Generator Dependencies"}]},{"id":"generating-routes","title":"Generating Routes"},{"id":"starting-the-project","title":"Starting the Project"},{"id":"screenshots","title":"Screenshots"}]},{"id":"react-native","title":"React Native generator","anchors":[{"id":"install","title":"Install"},{"id":"generating-a-native-app","title":"Generating a Native App"},{"id":"screenshots-in-ios-simulator","title":"Screenshots in iOS Simulator"}]},{"id":"vuejs","title":"Vue.js Generator"},{"id":"vuetify","title":"Vuetify Generator"},{"id":"quasar","title":"Quasar Framework Generator"},{"id":"typescript","title":"TypeScript Interfaces","anchors":[{"id":"example","title":"Example"}]},{"id":"troubleshooting","title":"Troubleshooting"}]},{"title":"Deployment","path":"deployment","items":[{"id":"index","title":"Deploying API Platform Applications"},{"id":"kubernetes","title":"Deploying to a Kubernetes Cluster","anchors":[{"id":"preparing-your-cluster-and-your-local-machine","title":"Preparing Your Cluster and Your Local Machine"},{"id":"creating-and-publishing-the-docker-images","title":"Creating and Publishing the Docker Images"},{"id":"deploying","title":"Deploying"},{"id":"initializing-the-database","title":"Initializing the Database"},{"id":"tiller-rbac-issue","title":"Tiller RBAC Issue"}]},{"id":"docker-compose","title":"Deploying with Docker Compose","anchors":[{"id":"installing-the-docker-compose-setup-for-production","title":"Installing the Docker Compose Setup for Production"},{"id":"building-and-pushing-the-docker-images","title":"Building and Pushing the Docker Images"},{"id":"pulling-the-docker-images-and-running-the-services","title":"Pulling the Docker Images and Running the Services"}]},{"id":"heroku","title":"Deploying an API Platform App on Heroku"},{"id":"traefik","title":"Implement Traefik Into API Platform Dockerized","anchors":[{"id":"basic-implementation","title":"Basic Implementation"},{"id":"known-issues","title":"Known Issues"},{"id":"going-further","title":"Going Further"}]}]},{"title":"Extra","path":"extra","items":[{"id":"releases","title":"The Release Process"},{"id":"philosophy","title":"API Platform's Philosophy"},{"id":"troubleshooting","title":"Troubleshooting","anchors":[{"id":"using-docker","title":"Using Docker","anchors":[{"id":"with-docker-toolbox-on-windows","title":"With Docker Toolbox on Windows"},{"id":"error-starting-userland-proxy","title":"Error starting userland proxy"}]},{"id":"using-api-platform-and-jms-serializer-in-the-same-project","title":"Using API Platform and JMS Serializer in the same project"},{"id":"upstream-sent-too-big-header-while-reading-response-header-from-upstream-502-error","title":"\"upstream sent too big header while reading response header from upstream\" 502 Error"}]},{"id":"contribution-guides","title":"Contribution guides"},{"id":"conduct","title":"Contributor Code of Conduct","anchors":[{"id":"our-pledge","title":"Our Pledge"},{"id":"our-standards","title":"Our Standards"},{"id":"our-responsibilities","title":"Our Responsibilities"},{"id":"scope","title":"Scope"},{"id":"enforcement","title":"Enforcement"},{"id":"attribution","title":"Attribution"}]}]}]},"next":{"slug":"/docs/master/core/data-providers/","title":"Data Providers"},"prefixedVersion":"master","previous":{"slug":"/docs/master/core/operations/","title":"Operations"},"title":"GraphQL Support","urlEditDocumentation":"https://github.com/api-platform/docs/edit/master/core/graphql.md","version":"master/"}}}