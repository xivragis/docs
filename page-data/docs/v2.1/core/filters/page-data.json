{"componentChunkName":"component---src-templates-doc-js","path":"/docs/v2.1/core/filters/","result":{"pageContext":{"html":"<h1 id=\"filters\" style=\"position:relative;\"><a href=\"#filters\" aria-label=\"filters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filters</h1>\n<p>API Platform Core provides a generic system to apply filters on collections. Useful filters for the Doctrine ORM are provided\nwith the library. You can also create custom filters that would fit your specific needs.\nYou can also add filtering support to your custom <a href=\"/docs/v2.1/core/data-providers/\">data providers</a> by implementing interfaces provided\nby the library.</p>\n<p>By default, all filters are disabled. They must be enabled explicitly.</p>\n<p>When a filter is enabled, it is automatically documented as a <code class=\"language-text\">hydra:search</code> property in the collection response. It also\nautomatically appears in the <a href=\"/docs/v2.1/core/nelmio-api-doc/\">NelmioApiDoc documentation</a> if it is available.</p>\n<h2 id=\"doctrine-orm-filters\" style=\"position:relative;\"><a href=\"#doctrine-orm-filters\" aria-label=\"doctrine orm filters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Doctrine ORM Filters</h2>\n<h3 id=\"search-filter\" style=\"position:relative;\"><a href=\"#search-filter\" aria-label=\"search filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Search Filter</h3>\n<p>If Doctrine ORM support is enabled, adding filters is as easy as registering a filter service in the <code class=\"language-text\">app/config/api_filters.yml</code>\nfile and adding an attribute to your resource configuration.</p>\n<p>The search filter supports <code class=\"language-text\">exact</code>, <code class=\"language-text\">partial</code>, <code class=\"language-text\">start</code>, <code class=\"language-text\">end</code>, and <code class=\"language-text\">word_start</code> matching strategies:</p>\n<ul>\n<li><code class=\"language-text\">partial</code> strategy uses <code class=\"language-text\">LIKE %text%</code> to search for fields that containing the text.</li>\n<li><code class=\"language-text\">start</code> strategy uses <code class=\"language-text\">LIKE text%</code> to search for fields that starts with text.</li>\n<li><code class=\"language-text\">end</code> strategy uses <code class=\"language-text\">LIKE %text</code> to search for fields that ends with text.</li>\n<li><code class=\"language-text\">word_start</code> strategy uses <code class=\"language-text\">LIKE text% OR LIKE % text%</code> to search for fields that contains the word starting with <code class=\"language-text\">text</code>.</li>\n</ul>\n<p>Prepend the letter <code class=\"language-text\">i</code> to the filter if you want it to be case insensitive. For example <code class=\"language-text\">ipartial</code> or <code class=\"language-text\">iexact</code>. Note that\nthis will use the <code class=\"language-text\">LOWER</code> function and <strong>will</strong> impact performance <a href=\"/docs/v2.1/core/performance/#search-filter\">if there is no proper index</a>.</p>\n<p>Case insensitivity may already be enforced at the database level depending on the <a href=\"https://en.wikipedia.org/wiki/Collation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">collation</a>\nused. If you are using MySQL, note that the commonly used <code class=\"language-text\">utf8_unicode_ci</code> collation (and its sibling <code class=\"language-text\">utf8mb4_unicode_ci</code>)\nare already case insensitive, as indicated by the <code class=\"language-text\">_ci</code> part in their names.</p>\n<p>In the following example, we will see how to allow the filtering of a list of e-commerce offers:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">offer.search_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.search_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'exact'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">price</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'exact'</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'partial'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"filters\"={\"offer.search_filter\"}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p><code class=\"language-text\">http://localhost:8000/api/offers?price=10</code> will return all offers with a price being exactly <code class=\"language-text\">10</code>.\n<code class=\"language-text\">http://localhost:8000/api/offers?name=shirt</code> will return all offers with a description containing the word \"shirt\".</p>\n<p>Filters can be combined together: <code class=\"language-text\">http://localhost:8000/api/offers?price=10&amp;name=shirt</code></p>\n<p>It is possible to filter on relations too:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">offer.search_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span>  <span class=\"token string\">'api_platform.doctrine.orm.search_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">product</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'exact'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>With this service definition, it is possible to find all offers belonging to the product identified by a given IRI.\nTry the following: <code class=\"language-text\">http://localhost:8000/api/offers?product=/api/products/12</code>\nUsing a numeric ID is also supported: <code class=\"language-text\">http://localhost:8000/api/offers?product=12</code></p>\n<p>Previous URLs will return all offers for the product having the following IRI as JSON-LD identifier (<code class=\"language-text\">@id</code>): <code class=\"language-text\">http://localhost:8000/api/products/12</code>.</p>\n<h3 id=\"date-filter\" style=\"position:relative;\"><a href=\"#date-filter\" aria-label=\"date filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Date Filter</h3>\n<p>The date filter allows for filtering a collection by date intervals.</p>\n<p>Syntax: <code class=\"language-text\">?property[&lt;after|before|strictly_after|strictly_before&gt;]=value</code></p>\n<p>The value can take any date format supported by the <a href=\"http://php.net/manual/en/datetime.construct.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">\\DateTime</code> constructor</a>.</p>\n<p>The <code class=\"language-text\">after</code> and <code class=\"language-text\">before</code> filters will filter including the value whereas <code class=\"language-text\">strictly_after</code> and <code class=\"language-text\">strictly_before</code> will filter excluding the value.</p>\n<p>As others filters, the date filter must be explicitly enabled:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Enable date filter for for the property \"dateProperty\" of the resource \"offer\"</span>\n    <span class=\"token key atrule\">offer.date_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.date_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">dateProperty</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~ </span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"filters\"={\"offer.date_filter\"}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h4 id=\"managing-null-values\" style=\"position:relative;\"><a href=\"#managing-null-values\" aria-label=\"managing null values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Managing <code class=\"language-text\">null</code> Values</h4>\n<p>The date filter is able to deal with date properties having <code class=\"language-text\">null</code> values.\nFour behaviors are available at the property level of the filter:</p>\n<table>\n<thead>\n<tr>\n<th>Description</th>\n<th>Strategy to set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Use the default behavior of the DBMS</td>\n<td><code class=\"language-text\">null</code></td>\n</tr>\n<tr>\n<td>Exclude items</td>\n<td><code class=\"language-text\">ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::EXCLUDE_NULL</code> (<code class=\"language-text\">exclude_null</code>)</td>\n</tr>\n<tr>\n<td>Consider items as oldest</td>\n<td><code class=\"language-text\">ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::INCLUDE_NULL_BEFORE</code> (<code class=\"language-text\">include_null_before</code>)</td>\n</tr>\n<tr>\n<td>Consider items as youngest</td>\n<td><code class=\"language-text\">ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::INCLUDE_NULL_AFTER</code> (<code class=\"language-text\">include_null_after</code>)</td>\n</tr>\n</tbody>\n</table>\n<p>For instance, exclude entries with a property value of <code class=\"language-text\">null</code>, with the following service definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">offer.date_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.date_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">dateProperty</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'exclude_null'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>If you use a service definition format other than YAML, you can use the <code class=\"language-text\">ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\DateFilter::EXCLUDE_NULL</code>\nconstant directly.</p>\n<h3 id=\"boolean-filter\" style=\"position:relative;\"><a href=\"#boolean-filter\" aria-label=\"boolean filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean Filter</h3>\n<p>The boolean filter allows you to search on boolean fields and values.</p>\n<p>Syntax: <code class=\"language-text\">?property=[true|false|1|0]</code></p>\n<p>You can either use TRUE or true, the parameters are case insensitive.</p>\n<p>Enable the filter:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">offer.boolean_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.boolean_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">isAvailableGenericallyInMyCountry</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~ </span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"filters\"={\"offer.boolean_filter\"}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Given that the collection endpoint is <code class=\"language-text\">/offers</code>, you can filter offers by boolean  with the following query: <code class=\"language-text\">/offers?isAvailableGenericallyInMyCountry=true</code>.</p>\n<p>It will return all offers where <code class=\"language-text\">isAvailableGenericallyInMyCountry</code> equals <code class=\"language-text\">true</code>.</p>\n<h3 id=\"numeric-filter\" style=\"position:relative;\"><a href=\"#numeric-filter\" aria-label=\"numeric filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Numeric Filter</h3>\n<p>The numeric filter allows you to search on numeric fields and values.</p>\n<p>Syntax: <code class=\"language-text\">?property=int|bigint|decimal...</code></p>\n<p>Enable the filter:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">offer.numeric_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.numeric_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">sold</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~ </span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"filters\"={\"offer.numeric_filter\"}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Given that the collection endpoint is <code class=\"language-text\">/offers</code>, you can filter offers by boolean  with the following query: <code class=\"language-text\">/offers?sold=1</code>.</p>\n<p>It will return all offers with <code class=\"language-text\">sold</code> equals <code class=\"language-text\">1</code>.</p>\n<h3 id=\"range-filter\" style=\"position:relative;\"><a href=\"#range-filter\" aria-label=\"range filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Range Filter</h3>\n<p>The range filter allows you to filter by a value Lower than, Greater than, Lower than or equal, Greater than or equal and between two values.</p>\n<p>Syntax: <code class=\"language-text\">?property[lt]|[gt]|[lte]|[gte]|[between]=value</code></p>\n<p>Enable the filter:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">offer.range_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.range_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">price</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~ </span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"filters\"={\"offer.range_filter\"}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Given that the collection endpoint is <code class=\"language-text\">/offers</code>, you can filters the price with the following query: <code class=\"language-text\">/offers?price[between]=12.99..15.99</code>.</p>\n<p>It will return all offers with <code class=\"language-text\">price</code> between 12.99 and 15.99.</p>\n<p>You can filter offers by joining two values, for example: <code class=\"language-text\">/offers?price[gt]=12.99&amp;price[lt]=19.99</code>.</p>\n<h3 id=\"order-filter\" style=\"position:relative;\"><a href=\"#order-filter\" aria-label=\"order filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Order Filter</h3>\n<p>The order filter allows to order a collection against the given properties.</p>\n<p>Syntax: <code class=\"language-text\">?order[property]=&lt;asc|desc&gt;</code></p>\n<p>Enable the filter:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">offer.order_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.order_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~ </span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"filters\"={\"offer.order_filter\"}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Given that the collection endpoint is <code class=\"language-text\">/offers</code>, you can filter offers by name in ascending order and then by ID in descending\norder with the following query: <code class=\"language-text\">/offers?order[name]=desc&amp;order[id]=asc</code>.</p>\n<p>By default, whenever the query does not specify the direction explicitly (e.g: <code class=\"language-text\">/offers?order[name]&amp;order[id]</code>), filters\nwill not be applied unless you configure a default order direction to use:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">offer.order_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span>  <span class=\"token string\">'api_platform.doctrine.orm.order_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">default_direction</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ASC'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">default_direction</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'DESC'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<h4 id=\"comparing-with-null-values\" style=\"position:relative;\"><a href=\"#comparing-with-null-values\" aria-label=\"comparing with null values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparing with Null Values</h4>\n<p>When the property used for ordering can contain <code class=\"language-text\">null</code> values, you may want to specify how <code class=\"language-text\">null</code> values are treated in\nthe comparison:</p>\n<table>\n<thead>\n<tr>\n<th>Description</th>\n<th>Strategy to set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Use the default behavior of the DBMS</td>\n<td><code class=\"language-text\">null</code></td>\n</tr>\n<tr>\n<td>Consider items as smallest</td>\n<td><code class=\"language-text\">ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\OrderFilter::NULLS_SMALLEST</code> (<code class=\"language-text\">nulls_smallest</code>)</td>\n</tr>\n<tr>\n<td>Consider items as largest</td>\n<td><code class=\"language-text\">ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\OrderFilter::NULLS_LARGEST</code> (<code class=\"language-text\">nulls_largest</code>)</td>\n</tr>\n</tbody>\n</table>\n<p>For instance, treat entries with a property value of <code class=\"language-text\">null</code> as the smallest, with the following service definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">offer.order_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.order_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">validFrom</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">nulls_comparison</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'nulls_smallest'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>If you use a service definition format other than YAML, you can use the <code class=\"language-text\">ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\OrderFilter::NULLS_SMALLEST</code>\nconstant directly.</p>\n<h4 id=\"using-a-custom-order-query-parameter-name\" style=\"position:relative;\"><a href=\"#using-a-custom-order-query-parameter-name\" aria-label=\"using a custom order query parameter name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using a Custom Order Query Parameter Name</h4>\n<p>A conflict will occur if <code class=\"language-text\">order</code> is also the name of a property with the search filter enabled.\nLuckily, the query parameter name to use is configurable:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/config.yml</span>\n<span class=\"token key atrule\">api_platform</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">collection</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">order_parameter_name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'_order'</span> <span class=\"token comment\"># the URL query parameter to use is now \"_order\"</span></code></pre></div>\n<h3 id=\"filtering-on-nested-properties\" style=\"position:relative;\"><a href=\"#filtering-on-nested-properties\" aria-label=\"filtering on nested properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Filtering on Nested Properties</h3>\n<p>Sometimes, you need to be able to perform filtering based on some linked resources (on the other side of a relation). All\nbuilt-in filters support nested properties using the dot (<code class=\"language-text\">.</code>) syntax, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">offer.search_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.search_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">product.color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'exact'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span>\n\n    <span class=\"token key atrule\">offer.order_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.order_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">product.releaseDate</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~ </span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>The above allows you to find offers by their respective product's color: <code class=\"language-text\">http://localhost:8000/api/offers?product.color=red</code>,\nor order offers by the product's release date: <code class=\"language-text\">http://localhost:8000/api/offers?order[product.releaseDate]=desc</code></p>\n<h3 id=\"enabling-a-filter-for-all-properties-of-a-resource\" style=\"position:relative;\"><a href=\"#enabling-a-filter-for-all-properties-of-a-resource\" aria-label=\"enabling a filter for all properties of a resource permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enabling a Filter for All Properties of a Resource</h3>\n<p>As we have seen in previous examples, properties where filters can be applied must be explicitly declared. If you don't\ncare about security and performance (e.g. an API with restricted access), it is also possible to enable built-in filters\nfor all properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Filter enabled for all properties</span>\n    <span class=\"token key atrule\">offer.order_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.doctrine.orm.order_filter'</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p><strong>Note: Filters on nested properties must still be enabled explicitly, in order to keep things sane</strong></p>\n<p>Regardless of this option, filters can by applied on a property only if:</p>\n<ul>\n<li>the property exists</li>\n<li>the value is supported (ex: <code class=\"language-text\">asc</code> or <code class=\"language-text\">desc</code> for the order filters).</li>\n</ul>\n<p>It means that the filter will be <strong>silently</strong> ignored if the property:</p>\n<ul>\n<li>does not exist</li>\n<li>is not enabled</li>\n<li>has an invalid value</li>\n</ul>\n<h2 id=\"serializer-filters\" style=\"position:relative;\"><a href=\"#serializer-filters\" aria-label=\"serializer filters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serializer Filters</h2>\n<h3 id=\"group-filter\" style=\"position:relative;\"><a href=\"#group-filter\" aria-label=\"group filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Group Filter</h3>\n<p>The group filter allows you to filter by serialization groups.</p>\n<p>Syntax: <code class=\"language-text\">?groups[]=&lt;group&gt;</code></p>\n<p>You can add as many groups as you need.</p>\n<p>Enable the filter:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">book.group_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.serializer.group_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># Default arguments values</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token string\">'groups'</span> <span class=\"token comment\"># The query parameter name</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token boolean important\">false    </span><span class=\"token comment\"># Allow to override the default serialization groups</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Entity/Book.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"filters\"={\"book.group_filter\"}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Given that the collection endpoint is <code class=\"language-text\">/books</code>, you can filter by serialization groups with the following query: <code class=\"language-text\">/books?groups[]=read&amp;groups[]=write</code>.</p>\n<p>By default the query parameter name is <code class=\"language-text\">groups</code> but you can easily customize it to another by changing the first argument.\nFor example, with <code class=\"language-text\">serialization_groups</code> as name:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">book.group_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span>  <span class=\"token string\">'api_platform.serializer.group_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'serialization_groups'</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>You can also override the default serialization groups when you use the filter by changing the second argument to\n<code class=\"language-text\">true</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">book.group_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.serializer.group_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'groups'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean important\">true </span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>To avoid uncontrolled data exposure, you can also specify a whitelist of serialization groups as a third argument:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">book.group_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.serializer.group_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'groups'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean important\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'allowed_group'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'safe_group'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"property-filter\" style=\"position:relative;\"><a href=\"#property-filter\" aria-label=\"property filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property filter</h3>\n<p>The property filter adds the possibility to filter serialization properties.</p>\n<p>Syntax: <code class=\"language-text\">?properties[]=&lt;property&gt;</code></p>\n<p>You can add as many properties as you need.</p>\n<p>Enable the filter:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">book.property_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.serializer.property_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span>         <span class=\"token comment\"># Default arguments values</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token string\">'properties'</span> <span class=\"token comment\"># The query parameter name</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token boolean important\">false        </span><span class=\"token comment\"># Allow to override the default serialization properties</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Entity/Book.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"filters\"={\"book.property_filter\"}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Given that the collection endpoint is <code class=\"language-text\">/books</code>, you can filter the serialization properties with the following query: <code class=\"language-text\">/books?properties[]=title&amp;properties[]=author</code>.</p>\n<p>By default the query parameter name is <code class=\"language-text\">properties</code> but you can easily customize it to another by changing the first argument.\nFor example, with <code class=\"language-text\">serialization_properties</code> as name:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">book.property_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.serializer.property_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'serialization_properties'</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>You can also override the default serialization properties when you use the filter by changing the second argument to\n<code class=\"language-text\">true</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">book.property_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.serializer.property_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'properties'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean important\">true </span><span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>To avoid uncontrolled data exposure, you can also specify a whitelist of properties as a third argument:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">book.group_filter</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">parent</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api_platform.serializer.group_filter'</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'groups'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean important\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'allowed_property'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">'nested'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'safe_property'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"creating-custom-filters\" style=\"position:relative;\"><a href=\"#creating-custom-filters\" aria-label=\"creating custom filters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Custom Filters</h2>\n<p>Custom filters can be written by implementing the <code class=\"language-text\">ApiPlatform\\Core\\Api\\FilterInterface</code>\ninterface.</p>\n<p>API Platform provides a convenient way to create Doctrine ORM filters. If you use <a href=\"/docs/v2.1/core/data-providers/\">custom data providers</a>,\nyou can still create filters by implementing the previously mentioned interface, but - as API Platform isn't aware of your\npersistence system's internals - you have to create the filtering logic by yourself.</p>\n<h3 id=\"creating-custom-doctrine-orm-filters\" style=\"position:relative;\"><a href=\"#creating-custom-doctrine-orm-filters\" aria-label=\"creating custom doctrine orm filters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Custom Doctrine ORM Filters</h3>\n<p>Doctrine filters have access to the HTTP request (Symfony's <code class=\"language-text\">Request</code> object) and to the <code class=\"language-text\">QueryBuilder</code> instance used to\nretrieve data from the database. They are only applied to collections. If you want to deal with the DQL query generated\nto retrieve items, or don't need to access the HTTP request, <a href=\"/docs/v2.1/core/extensions/\">extensions</a> are the way to go.</p>\n<p>A Doctrine ORM filter is basically a class implementing the <code class=\"language-text\">ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\FilterInterface</code>.\nAPI Platform includes a convenient abstract class implementing this interface and providing utility methods: <code class=\"language-text\">ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Filter\\AbstractFilter</code></p>\n<p>In the following example, we create a class to filter a collection by applying a regexp to a property. The <code class=\"language-text\">REGEXP</code> DQL\nfunction used in this example can be found in the <a href=\"https://github.com/beberlei/DoctrineExtensions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">DoctrineExtensions</code></a>\nlibrary. This library must be properly installed and registered to use this example (works only with MySQL).</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Filter/RegexpFilter.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Filter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Bridge<span class=\"token punctuation\">\\</span>Doctrine<span class=\"token punctuation\">\\</span>Orm<span class=\"token punctuation\">\\</span>Filter<span class=\"token punctuation\">\\</span>AbstractFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Bridge<span class=\"token punctuation\">\\</span>Doctrine<span class=\"token punctuation\">\\</span>Orm<span class=\"token punctuation\">\\</span>Util<span class=\"token punctuation\">\\</span>QueryNameGeneratorInterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Doctrine<span class=\"token punctuation\">\\</span>ORM<span class=\"token punctuation\">\\</span>QueryBuilder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RegexpFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractFilter</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">filterProperty</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$property</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> QueryBuilder <span class=\"token variable\">$queryBuilder</span><span class=\"token punctuation\">,</span> QueryNameGeneratorInterface <span class=\"token variable\">$queryNameGenerator</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$operationName</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$parameterName</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$queryNameGenerator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">generateParameterName</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$property</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Generate a unique parameter name to avoid collisions with other filters</span>\n        <span class=\"token variable\">$queryBuilder</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">andWhere</span><span class=\"token punctuation\">(</span><span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'REGEXP(o.%s, :%s) = 1'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$property</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$parameterName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setParameter</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$parameterName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// This function is only used to hook in documentation generators (supported by Swagger and Hydra)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$resourceClass</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$description</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">properties</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$property</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$strategy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$description</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'regexp_'</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$property</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token single-quoted-string string\">'property'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$property</span><span class=\"token punctuation\">,</span>\n                <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'string'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token single-quoted-string string\">'required'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">,</span>\n                <span class=\"token single-quoted-string string\">'swagger'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token single-quoted-string string\">'description'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'Filter using a regex. This will appear in the Swagger documentation!'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'Custom name to use in the Swagger documentation'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token single-quoted-string string\">'Will appear below the name in the Swagger documentation'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$description</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Then, register this filter as a service:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">'AppBundle\\Filter\\RegexpFilter'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>In the previous example, the filter can be applied on any property. However, thanks to the <code class=\"language-text\">AbstractFilter</code> class,\nit can also be enabled for some properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">'AppBundle\\Filter\\RegexpFilter'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'@doctrine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@request_stack'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@?logger'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">email</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">anOtherProperty</span><span class=\"token punctuation\">:</span> <span class=\"token null important\">~ </span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>Finally, add this filter to resources you want to be filtered:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Entity/Offer.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Annotation<span class=\"token punctuation\">\\</span>ApiResource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Filter<span class=\"token punctuation\">\\</span>RegexpFilter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ApiResource(attributes={\"filters\"={RegexpFilter::class}})\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Offer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>You can now enable this filter using URLs like <code class=\"language-text\">http://example.com/offers?regexp_email=^[FOO]</code>. This new filter will also\nappear in Swagger and Hydra documentations.</p>\n<h3 id=\"overriding-extraction-of-properties-from-the-request\" style=\"position:relative;\"><a href=\"#overriding-extraction-of-properties-from-the-request\" aria-label=\"overriding extraction of properties from the request permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overriding Extraction of Properties from the Request</h3>\n<p>You can change the way the filter parameters are extracted from the request. This can be done by overriding the <code class=\"language-text\">extractProperties(\\Symfony\\Component\\HttpFoundation\\Request $request)</code>\nmethod.</p>\n<p>In the following example, we will completely change the syntax of the order filter to be the following: <code class=\"language-text\">?filter[order][property]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">// src/AppBundle/Filter/CustomOrderFilter.php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">AppBundle<span class=\"token punctuation\">\\</span>Filter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">ApiPlatform<span class=\"token punctuation\">\\</span>Core<span class=\"token punctuation\">\\</span>Bridge<span class=\"token punctuation\">\\</span>Doctrine<span class=\"token punctuation\">\\</span>Orm<span class=\"token punctuation\">\\</span>Filter<span class=\"token punctuation\">\\</span>OrderFilter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpFoundation<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomOrderFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">OrderFilter</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">extractProperties</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">query</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'filter[order]'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p>Finally, register the custom filter:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app/config/api_filters.yml</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">'AppBundle\\Filter\\CustomOrderFilter'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'api_platform.filter'</span> <span class=\"token punctuation\">]</span></code></pre></div>","nav":{"chapters":[{"title":"The Distribution: Create Powerful APIs with Ease","path":"distribution","items":[{"id":"index","title":"Creating your First API with API Platform, in 5 Minutes","anchors":[{"id":"installing-the-framework","title":"Installing the framework","anchors":[{"id":"in-docker-containers","title":"In Docker Containers"},{"id":"via-composer","title":"Via Composer"}]},{"id":"its-ready","title":"It's ready!"},{"id":"creating-the-model","title":"Creating the model"},{"id":"validating-data","title":"Validating Data"},{"id":"going-client-side","title":"Going Client-Side"},{"id":"other-features","title":"Other Features"}]},{"id":"testing","title":"Testing and Specifying the API"}]},{"title":"The API Component","path":"core","items":[{"id":"index","title":"The API Platform Core Library","anchors":[{"id":"features","title":"Features"},{"id":"other-resources","title":"Other resources"}]},{"id":"getting-started","title":"Getting started","anchors":[{"id":"installing-api-platform-core","title":"Installing API Platform Core"},{"id":"before-reading-this-documentation","title":"Before Reading this Documentation"},{"id":"mapping-the-entities","title":"Mapping the Entities"}]},{"id":"operations","title":"Operations","anchors":[{"id":"enabling-and-disabling-operations","title":"Enabling and Disabling Operations"},{"id":"configuring-operations","title":"Configuring Operations"},{"id":"subresources","title":"Subresources","anchors":[{"id":"control-the-path-of-subresources","title":"Control the Path of Subresources"},{"id":"control-the-depth-of-subresources","title":"Control the Depth of Subresources"}]},{"id":"creating-custom-operations-and-controllers","title":"Creating Custom Operations and Controllers"}]},{"id":"filters","title":"Filters","anchors":[{"id":"doctrine-orm-filters","title":"Doctrine ORM Filters","anchors":[{"id":"search-filter","title":"Search Filter"},{"id":"date-filter","title":"Date Filter","anchors":[{"id":"managing-null-values","title":"Managing null Values"}]},{"id":"boolean-filter","title":"Boolean Filter"},{"id":"numeric-filter","title":"Numeric Filter"},{"id":"range-filter","title":"Range Filter"},{"id":"order-filter","title":"Order Filter","anchors":[{"id":"comparing-with-null-values","title":"Comparing with Null Values"},{"id":"using-a-custom-order-query-parameter-name","title":"Using a Custom Order Query Parameter Name"}]},{"id":"filtering-on-nested-properties","title":"Filtering on Nested Properties"},{"id":"enabling-a-filter-for-all-properties-of-a-resource","title":"Enabling a Filter for All Properties of a Resource"}]},{"id":"serializer-filters","title":"Serializer Filters","anchors":[{"id":"group-filter","title":"Group Filter"},{"id":"property-filter","title":"Property filter"}]},{"id":"creating-custom-filters","title":"Creating Custom Filters","anchors":[{"id":"creating-custom-doctrine-orm-filters","title":"Creating Custom Doctrine ORM Filters"},{"id":"overriding-extraction-of-properties-from-the-request","title":"Overriding Extraction of Properties from the Request"}]}]},{"id":"serialization","title":"The Serialization Process","anchors":[{"id":"overall-process","title":"Overall Process"},{"id":"available-serializers","title":"Available Serializers"},{"id":"the-serialization-context-groups-and-relations","title":"The Serialization Context, Groups and Relations","anchors":[{"id":"configuration","title":"Configuration"}]},{"id":"using-serialization-groups","title":"Using Serialization Groups"},{"id":"using-different-serialization-groups-per-operation","title":"Using Different Serialization Groups per Operation","anchors":[{"id":"embedding-relations","title":"Embedding Relations"},{"id":"normalization","title":"Normalization"},{"id":"denormalization","title":"Denormalization"}]},{"id":"changing-the-serialization-context-dynamically","title":"Changing the Serialization Context Dynamically"},{"id":"name-conversion","title":"Name Conversion"},{"id":"decorating-a-serializer-and-add-extra-data","title":"Decorating a Serializer and Add Extra Data"},{"id":"entity-identifier-case","title":"Entity Identifier Case"},{"id":"embedding-the-json-ld-context","title":"Embedding the JSON-LD Context"}]},{"id":"validation","title":"Validation","anchors":[{"id":"using-validation-groups","title":"Using Validation Groups"},{"id":"dynamic-validation-groups","title":"Dynamic Validation Groups"}]},{"id":"security","title":"Security"},{"id":"data-providers","title":"Data Providers","anchors":[{"id":"custom-collection-data-provider","title":"Custom Collection Data Provider"},{"id":"custom-item-data-provider","title":"Custom Item Data Provider"}]},{"id":"pagination","title":"Pagination","anchors":[{"id":"disabling-the-pagination","title":"Disabling the Pagination","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a specific resource"}]}]},{"id":"changing-the-number-of-items-per-page","title":"Changing the Number of Items per Page","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"},{"id":"client-side","title":"Client-side","anchors":[{"id":"globally","title":"Globally"},{"id":"for-a-specific-resource","title":"For a Specific Resource"}]}]}]},{"id":"events","title":"The Event System"},{"id":"content-negotiation","title":"Content Negotiation","anchors":[{"id":"enabling-several-formats","title":"Enabling Several Formats"},{"id":"registering-a-custom-serializer","title":"Registering a Custom Serializer"},{"id":"writing-a-custom-normalizer","title":"Writing a Custom Normalizer"}]},{"id":"performance","title":"Performance","anchors":[{"id":"enabling-the-builtin-http-cache-invalidation-system","title":"Enabling the Builtin HTTP Cache Invalidation System"},{"id":"enabling-the-metadata-cache","title":"Enabling the Metadata Cache"},{"id":"using-ppm-php-pm","title":"Using PPM (PHP-PM)"},{"id":"doctrine-queries-and-indexes","title":"Doctrine Queries and Indexes","anchors":[{"id":"search-filter","title":"Search Filter"},{"id":"eager-loading","title":"Eager loading","anchors":[{"id":"max-joins","title":"Max joins"},{"id":"force-eager","title":"Force eager"},{"id":"override-at-resource-and-operation-level","title":"Override at resource and operation level"},{"id":"disable-eager-loading","title":"Disable eager loading"}]}]}]},{"id":"extensions","title":"Extensions","anchors":[{"id":"custom-extension","title":"Custom Extension"},{"id":"example","title":"Example","anchors":[{"id":"blocking-anonymous-users","title":"Blocking Anonymous Users"}]}]},{"id":"swagger","title":"Swagger / Open API Support","anchors":[{"id":"overriding-the-swagger-documentation","title":"Overriding the Swagger Documentation"},{"id":"using-the-swagger-context","title":"Using the Swagger Context"},{"id":"changing-the-swagger-ui-location","title":"Changing the Swagger UI Location","anchors":[{"id":"disabling-swagger-ui","title":"Disabling Swagger UI"},{"id":"manually-registering-the-swagger-ui-controller","title":"Manually Registering the Swagger UI Controller"},{"id":"enable-swagger-doc-for-api-gateway","title":"Enable Swagger doc for API Gateway"}]}]},{"id":"default-order","title":"Overriding Default Order"},{"id":"external-vocabularies","title":"Using External Vocabularies"},{"id":"operation-path-naming","title":"Operation Path Naming","anchors":[{"id":"configuration","title":"Configuration"},{"id":"create-a-custom-operation-path-resolver","title":"Create a Custom Operation Path Resolver","anchors":[{"id":"defining-the-operation-path-resolver","title":"Defining the Operation Path Resolver"},{"id":"registering-the-service","title":"Registering the Service"},{"id":"configure-it","title":"Configure It"}]}]},{"id":"extending-jsonld-context","title":"Extending JSON-LD context"},{"id":"form-data","title":"Accept application/x-www-form-urlencoded Form Data","anchors":[{"id":"create-your-deserializelistener-decorator","title":"Create your DeserializeListener Decorator"},{"id":"create-the-service-definition","title":"Create the Service Definition"},{"id":"cleanup-the-original-listener","title":"Cleanup the Original Listener"}]},{"id":"jwt","title":"JWT Authentication"},{"id":"angularjs-integration","title":"AngularJS Integration","anchors":[{"id":"restangular","title":"Restangular"},{"id":"ng-admin","title":"ng-admin"}]},{"id":"fosuser-bundle","title":"FOSUserBundle Integration","anchors":[{"id":"installing-the-bundle","title":"Installing the Bundle"},{"id":"enabling-the-bridge","title":"Enabling the Bridge"},{"id":"creating-a-user-entity-with-serialization-groups","title":"Creating a User Entity with Serialization Groups"}]},{"id":"nelmio-api-doc","title":"NelmioApiDocBundle Integration"},{"id":"configuration","title":"Configuration"}]},{"title":"The Schema Generator Component","path":"schema-generator","items":[{"id":"index","title":"The schema generator","anchors":[{"id":"what-is-schemaorg","title":"What is Schema.org?"},{"id":"why-use-schemaorg-data-to-generate-a-php-model","title":"Why use Schema.org data to generate a PHP model?","anchors":[{"id":"dont-reinvent-the-wheel","title":"Don't Reinvent The Wheel"},{"id":"improve-seo-and-user-experience","title":"Improve SEO and user experience"},{"id":"be-ready-for-the-future","title":"Be ready for the future"}]},{"id":"documentation","title":"Documentation"}]},{"id":"getting-started","title":"Getting Started","anchors":[{"id":"installation","title":"Installation"},{"id":"model-scaffolding","title":"Model scaffolding","anchors":[{"id":"going-further","title":"Going further"}]},{"id":"cardinality-extraction","title":"Cardinality extraction"}]},{"id":"configuration","title":"Configuration","anchors":[{"id":"customizing-php-namespaces","title":"Customizing PHP Namespaces"},{"id":"forcing-a-field-range","title":"Forcing a Field Range"},{"id":"forcing-a-field-cardinality","title":"Forcing a Field Cardinality"},{"id":"forcing-a-relation-table-name","title":"Forcing a Relation Table Name"},{"id":"forcing-or-disabling-a-class-parent","title":"Forcing (or Disabling) a Class Parent"},{"id":"forcing-a-class-to-be-abstract","title":"Forcing a Class to be Abstract"},{"id":"forcing-a-nullable-property","title":"Forcing a Nullable Property"},{"id":"forcing-a-unique-property","title":"Forcing a Unique Property"},{"id":"making-a-property-read-only","title":"Making a Property Read Only"},{"id":"making-a-property-write-only","title":"Making a Property Write Only"},{"id":"forcing-a-property-to-be-in-a-serialization-group","title":"Forcing a Property to be in a Serialization Group"},{"id":"forcing-an-embeddable-class-to-be-embedded","title":"Forcing an Embeddable Class to be Embedded"},{"id":"author-phpdoc","title":"Author PHPDoc"},{"id":"disabling-generators-and-creating-custom-ones","title":"Disabling Generators and Creating Custom Ones"},{"id":"skipping-accessor-method-generation","title":"Skipping Accessor Method Generation"},{"id":"disabling-the-id-generator","title":"Disabling the id Generator"},{"id":"generating-uuids","title":"Generating UUIDs"},{"id":"user-submitted-uuids","title":"User submitted UUIDs"},{"id":"generating-custom-ids","title":"Generating Custom IDs"},{"id":"disabling-usage-of-doctrine-collection","title":"Disabling Usage of Doctrine Collection"},{"id":"changing-the-field-visibility","title":"Changing the Field Visibility"},{"id":"generating-asserttype-annotations","title":"Generating @Assert\\Type Annotations"},{"id":"forcing-doctrine-inheritance-mapping-annotation","title":"Forcing Doctrine Inheritance Mapping Annotation"},{"id":"interfaces-and-doctrine-resolve-target-entity-listener","title":"Interfaces and Doctrine Resolve Target Entity Listener"},{"id":"custom-schemas","title":"Custom Schemas"},{"id":"checking-goodrelation-compatibility","title":"Checking GoodRelation Compatibility"},{"id":"php-file-header","title":"PHP File Header"},{"id":"full-configuration-reference","title":"Full Configuration Reference"}]}]},{"title":"The Admin Component","path":"admin","items":[{"id":"index","title":"The API Platform Admin","anchors":[{"id":"features","title":"Features"}]},{"id":"getting-started","title":"Getting Started","anchors":[{"id":"installation","title":"Installation"},{"id":"creating-the-admin","title":"Creating the Admin"},{"id":"customizing-the-admin","title":"Customizing the Admin","anchors":[{"id":"using-custom-components","title":"Using Custom Components"},{"id":"managing-files-and-images","title":"Managing Files and Images"},{"id":"using-a-custom-validation-function-or-inject-custom-props","title":"Using a Custom Validation Function or Inject Custom Props"}]}]},{"id":"authentication-support","title":"Authentication Support"},{"id":"handling-relations-to-collections","title":"Handling Relations to Collections","anchors":[{"id":"using-an-autocomplete-input-for-relations","title":"Using an Autocomplete Input for Relations"}]}]},{"title":"The Client Generator Component","path":"client-generator","items":[{"id":"index","title":"The API Platform Client Generator","anchors":[{"id":"features","title":"Features"}]},{"id":"react","title":"React generator"},{"id":"vuejs","title":"Vue.js generator"},{"id":"troubleshooting","title":"Troubleshooting"}]},{"title":"Deployment","path":"deployment","items":[{"id":"index","title":"Deploying API Platform Applications"},{"id":"docker","title":"Using API Platform with Docker","anchors":[{"id":"services","title":"Services"},{"id":"installation","title":"Installation"}]},{"id":"heroku","title":"Deploying an API Platform App on Heroku"}]},{"title":"Extra","path":"extra","items":[{"id":"philosophy","title":"API Platform's Philosophy"},{"id":"troubleshooting","title":"Troubleshooting","anchors":[{"id":"using-docker","title":"Using Docker","anchors":[{"id":"with-docker-toolbox-on-windows","title":"With Docker Toolbox on Windows"},{"id":"error-starting-userland-proxy","title":"Error starting userland proxy"}]},{"id":"using-api-platform-and-jms-serializer-in-the-same-project","title":"Using API Platform and JMS Serializer in the same project"}]},{"id":"contribution-guides","title":"Contribution guides"},{"id":"conduct","title":"Contributor Code of Conduct","anchors":[{"id":"our-pledge","title":"Our Pledge"},{"id":"our-standards","title":"Our Standards"},{"id":"our-responsibilities","title":"Our Responsibilities"},{"id":"scope","title":"Scope"},{"id":"enforcement","title":"Enforcement"},{"id":"attribution","title":"Attribution"}]}]}]},"next":{"slug":"/docs/v2.1/core/serialization/","title":"The Serialization Process"},"prefixedVersion":"v2.1","previous":{"slug":"/docs/v2.1/core/operations/","title":"Operations"},"title":"Filters","urlEditDocumentation":"https://github.com/api-platform/docs/edit/2.1/core/filters.md","version":"v2.1/"}}}